#!/usr/bin/env python3
"""
Advanced Natural Language Interface for Claude-PropellerAds Integration

This provides a natural language interface where you can talk to Claude
in plain text about PropellerAds campaign management.
"""

import os
import asyncio
import json
import re
from typing import Dict, Any, List, Optional
from claude_propellerads_integration import ClaudePropellerAdsIntegration

class ClaudeNaturalInterface:
    """Natural language interface for Claude-PropellerAds integration"""
    
    def __init__(self):
        self.integration = ClaudePropellerAdsIntegration()
        self.conversation_history = []
        print("ü§ñ Claude Natural Language Interface Ready!")
        print("=" * 60)
        print("üí¨ –ì–æ–≤–æ—Ä–∏—Ç–µ —Å–æ –º–Ω–æ–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º –æ PropellerAds!")
        print("üìù –ü—Ä–∏–º–µ—Ä—ã:")
        print("   ‚Ä¢ '–ü–æ–∫–∞–∂–∏ –±–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞'")
        print("   ‚Ä¢ '–°–æ–∑–¥–∞–π –∫–∞–º–ø–∞–Ω–∏—é –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞ –≤ –°–®–ê'")
        print("   ‚Ä¢ '–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π —Å—Ç–∞–≤–∫–∏ –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏ 123'")
        print("   ‚Ä¢ '–î–æ–±–∞–≤—å –†–æ—Å—Å–∏—é –≤ –±–ª–µ–∫–ª–∏—Å—Ç –∫–∞–º–ø–∞–Ω–∏–∏ 456'")
        print("   ‚Ä¢ '–ü–æ–∫–∞–∂–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é'")
        print("=" * 60)
        self._show_account_status()
    
    def _show_account_status(self):
        """Show initial account status"""
        try:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            result = loop.run_until_complete(self.integration.get_balance())
            loop.close()
            if result["success"]:
                print(f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {result['balance']['formatted']}")
            print()
        except:
            print("üí∞ –ë–∞–ª–∞–Ω—Å: –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...")
            print()
    
    def _extract_intent(self, text: str) -> Dict[str, Any]:
        """Extract intent from natural language text"""
        text = text.lower().strip()
        
        # Balance queries
        if any(word in text for word in ['–±–∞–ª–∞–Ω—Å', 'balance', '–¥–µ–Ω—å–≥–∏', '—Å—Ä–µ–¥—Å—Ç–≤–∞']):
            return {'intent': 'balance', 'params': {}}
        
        # Campaign queries
        if any(word in text for word in ['–∫–∞–º–ø–∞–Ω–∏', 'campaign']):
            if any(word in text for word in ['—Å–æ–∑–¥–∞–π', '—Å–æ–∑–¥–∞—Ç—å', 'create', '–Ω–æ–≤–∞—è', 'new']):
                return self._extract_campaign_creation(text)
            elif any(word in text for word in ['—Å–ø–∏—Å–æ–∫', 'list', '–ø–æ–∫–∞–∂–∏', 'show']):
                return {'intent': 'list_campaigns', 'params': {}}
            elif any(word in text for word in ['—É–¥–∞–ª–∏', 'delete', '—É–±–µ—Ä–∏']):
                return self._extract_campaign_id(text, 'delete_campaign')
            elif any(word in text for word in ['–æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–π', 'optimize', '—É–ª—É—á—à–∏']):
                return self._extract_campaign_id(text, 'optimize_campaign')
            elif any(word in text for word in ['–¥–µ—Ç–∞–ª–∏', 'details', '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', 'info']):
                return self._extract_campaign_id(text, 'campaign_details')
        
        # Statistics queries
        if any(word in text for word in ['—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'stats', '–æ—Ç—á–µ—Ç', 'report', '–∞–Ω–∞–ª–∏—Ç–∏–∫–∞']):
            return self._extract_statistics_request(text)
        
        # Targeting/Blacklist/Whitelist
        if any(word in text for word in ['–±–ª–µ–∫–ª–∏—Å—Ç', 'blacklist', '–∑–∞–±–ª–æ–∫–∏—Ä—É–π', 'block']):
            return self._extract_blacklist_request(text)
        
        if any(word in text for word in ['–≤–∞–π—Ç–ª–∏—Å—Ç', 'whitelist', '—Ä–∞–∑—Ä–µ—à–∏', 'allow']):
            return self._extract_whitelist_request(text)
        
        # Bid optimization
        if any(word in text for word in ['—Å—Ç–∞–≤–∫', 'bid', '—Ü–µ–Ω–∞', 'price']):
            return self._extract_bid_optimization(text)
        
        # Creative management
        if any(word in text for word in ['–∫—Ä–µ–∞—Ç–∏–≤', 'creative', '–æ–±—ä—è–≤–ª–µ–Ω–∏–µ', 'ad']):
            return self._extract_creative_request(text)
        
        # Overview/Status
        if any(word in text for word in ['–æ–±–∑–æ—Ä', 'overview', '—Å—Ç–∞—Ç—É—Å', 'status', '–æ–±—â–∞—è']):
            return {'intent': 'overview', 'params': {}}
        
        # Help
        if any(word in text for word in ['–ø–æ–º–æ—â—å', 'help', '—á—Ç–æ –º–æ–∂–µ—à—å', '–∫–æ–º–∞–Ω–¥—ã']):
            return {'intent': 'help', 'params': {}}
        
        return {'intent': 'unknown', 'params': {'text': text}}
    
    def _extract_campaign_creation(self, text: str) -> Dict[str, Any]:
        """Extract campaign creation parameters"""
        params = {}
        
        # Extract countries
        countries = []
        if '—Å—à–∞' in text or 'usa' in text or '–∞–º–µ—Ä–∏–∫' in text:
            countries.append('US')
        if '—Ä–æ—Å—Å–∏' in text or 'russia' in text or '—Ä—Ñ' in text:
            countries.append('RU')
        if '–≥–µ—Ä–º–∞–Ω' in text or 'germany' in text:
            countries.append('DE')
        if '—Ñ—Ä–∞–Ω—Ü' in text or 'france' in text:
            countries.append('FR')
        
        # Extract device types
        devices = []
        if '–º–æ–±–∏–ª—å–Ω' in text or 'mobile' in text or '—Ç–µ–ª–µ—Ñ–æ–Ω' in text:
            devices.append('mobile')
        if '–¥–µ—Å–∫—Ç–æ–ø' in text or 'desktop' in text or '–∫–æ–º–ø—å—é—Ç–µ—Ä' in text:
            devices.append('desktop')
        if '–ø–ª–∞–Ω—à–µ—Ç' in text or 'tablet' in text:
            devices.append('tablet')
        
        # Extract budget
        budget_match = re.search(r'(\$?\d+)', text)
        budget = int(budget_match.group(1).replace('$', '')) if budget_match else 100
        
        # Extract campaign name
        name = f"Campaign {len(countries)}geo {len(devices)}dev ${budget}"
        
        params = {
            'name': name,
            'countries': countries,
            'devices': devices,
            'budget': budget
        }
        
        return {'intent': 'create_campaign', 'params': params}
    
    def _extract_campaign_id(self, text: str, intent: str) -> Dict[str, Any]:
        """Extract campaign ID from text"""
        # Look for numbers in text
        numbers = re.findall(r'\d+', text)
        campaign_id = int(numbers[0]) if numbers else None
        
        return {'intent': intent, 'params': {'campaign_id': campaign_id}}
    
    def _extract_statistics_request(self, text: str) -> Dict[str, Any]:
        """Extract statistics request parameters"""
        params = {}
        
        # Extract time period
        if '–Ω–µ–¥–µ–ª—è' in text or 'week' in text:
            params['days_back'] = 7
        elif '–º–µ—Å—è—Ü' in text or 'month' in text:
            params['days_back'] = 30
        elif '–¥–µ–Ω—å' in text or 'day' in text or '—Å–µ–≥–æ–¥–Ω—è' in text:
            params['days_back'] = 1
        else:
            params['days_back'] = 7
        
        # Extract campaign ID if specified
        numbers = re.findall(r'\d+', text)
        if numbers:
            params['campaign_id'] = int(numbers[0])
        
        return {'intent': 'statistics', 'params': params}
    
    def _extract_blacklist_request(self, text: str) -> Dict[str, Any]:
        """Extract blacklist request"""
        params = {}
        
        # Extract campaign ID
        numbers = re.findall(r'\d+', text)
        if numbers:
            params['campaign_id'] = int(numbers[0])
        
        # Extract countries to blacklist
        countries = []
        if '—Ä–æ—Å—Å–∏' in text or 'russia' in text:
            countries.append('RU')
        if '–∫–∏—Ç–∞–π' in text or 'china' in text:
            countries.append('CN')
        if '–∏–Ω–¥–∏—è' in text or 'india' in text:
            countries.append('IN')
        
        params['countries'] = countries
        
        return {'intent': 'blacklist', 'params': params}
    
    def _extract_whitelist_request(self, text: str) -> Dict[str, Any]:
        """Extract whitelist request"""
        params = {}
        
        # Extract campaign ID
        numbers = re.findall(r'\d+', text)
        if numbers:
            params['campaign_id'] = int(numbers[0])
        
        # Extract countries to whitelist
        countries = []
        if '—Å—à–∞' in text or 'usa' in text:
            countries.append('US')
        if '–≥–µ—Ä–º–∞–Ω' in text or 'germany' in text:
            countries.append('DE')
        if '—Ñ—Ä–∞–Ω—Ü' in text or 'france' in text:
            countries.append('FR')
        
        params['countries'] = countries
        
        return {'intent': 'whitelist', 'params': params}
    
    def _extract_bid_optimization(self, text: str) -> Dict[str, Any]:
        """Extract bid optimization request"""
        params = {}
        
        # Extract campaign ID
        numbers = re.findall(r'\d+', text)
        if numbers:
            params['campaign_id'] = int(numbers[0])
        
        # Extract bid change
        if '—É–≤–µ–ª–∏—á—å' in text or 'increase' in text or '–ø–æ–≤—ã—Å' in text:
            params['action'] = 'increase'
        elif '—É–º–µ–Ω—å—à' in text or 'decrease' in text or '—Å–Ω–∏–∑' in text:
            params['action'] = 'decrease'
        else:
            params['action'] = 'optimize'
        
        return {'intent': 'bid_optimization', 'params': params}
    
    def _extract_creative_request(self, text: str) -> Dict[str, Any]:
        """Extract creative management request"""
        params = {}
        
        if '—Å–æ–∑–¥–∞–π' in text or 'create' in text:
            return {'intent': 'create_creative', 'params': params}
        elif '—Å–ø–∏—Å–æ–∫' in text or 'list' in text:
            return {'intent': 'list_creatives', 'params': params}
        
        return {'intent': 'creative_info', 'params': params}
    
    async def process_natural_language(self, text: str) -> str:
        """Process natural language input and return response"""
        # Extract intent
        intent_data = self._extract_intent(text)
        intent = intent_data['intent']
        params = intent_data['params']
        
        try:
            if intent == 'balance':
                result = await self.integration.get_balance()
                if result['success']:
                    return f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {result['balance']['formatted']}"
                else:
                    return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {result['error']}"
            
            elif intent == 'list_campaigns':
                result = await self.integration.get_campaigns()
                if result['success']:
                    campaigns = result['campaigns']
                    response = f"üìã –ù–∞–π–¥–µ–Ω–æ {len(campaigns)} –∫–∞–º–ø–∞–Ω–∏–π:\n"
                    for i, campaign in enumerate(campaigns[:5], 1):
                        name = campaign.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                        status = campaign.get('status', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                        campaign_id = campaign.get('id', 'N/A')
                        response += f"  {i}. {name} (ID: {campaign_id}, –°—Ç–∞—Ç—É—Å: {status})\n"
                    if len(campaigns) > 5:
                        response += f"  ... –∏ –µ—â–µ {len(campaigns) - 5} –∫–∞–º–ø–∞–Ω–∏–π"
                    return response
                else:
                    return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–π: {result['error']}"
            
            elif intent == 'create_campaign':
                # Simulate campaign creation
                name = params.get('name', '–ù–æ–≤–∞—è –∫–∞–º–ø–∞–Ω–∏—è')
                countries = params.get('countries', ['US'])
                devices = params.get('devices', ['mobile'])
                budget = params.get('budget', 100)
                
                response = f"üéØ –°–æ–∑–¥–∞—é –∫–∞–º–ø–∞–Ω–∏—é '{name}'...\n"
                response += f"üåç –°—Ç—Ä–∞–Ω—ã: {', '.join(countries)}\n"
                response += f"üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {', '.join(devices)}\n"
                response += f"üí∞ –ë—é–¥–∂–µ—Ç: ${budget}/–¥–µ–Ω—å\n"
                response += f"‚úÖ –ö–∞–º–ø–∞–Ω–∏—è –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ (–¥–µ–º–æ —Ä–µ–∂–∏–º)"
                return response
            
            elif intent == 'campaign_details':
                campaign_id = params.get('campaign_id')
                if campaign_id:
                    result = await self.integration.get_campaign_details(campaign_id)
                    if result['success']:
                        campaign = result['campaign']
                        name = campaign.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                        status = campaign.get('status', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                        return f"üìã –ö–∞–º–ø–∞–Ω–∏—è {campaign_id}:\n  –ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n  –°—Ç–∞—Ç—É—Å: {status}"
                    else:
                        return f"‚ùå –ö–∞–º–ø–∞–Ω–∏—è {campaign_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                else:
                    return "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∫–∞–º–ø–∞–Ω–∏–∏"
            
            elif intent == 'optimize_campaign':
                campaign_id = params.get('campaign_id')
                if campaign_id:
                    result = await self.integration.analyze_campaign_performance(campaign_id)
                    if result['success']:
                        analysis = result['analysis']
                        response = f"üîç –ê–Ω–∞–ª–∏–∑ –∫–∞–º–ø–∞–Ω–∏–∏ {campaign_id}:\n"
                        response += f"üìä CTR: {analysis.get('ctr', 'N/A')}%\n"
                        response += f"üí∞ –û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã: ${analysis.get('total_cost', 'N/A')}\n"
                        
                        recommendations = analysis.get('recommendations', [])
                        if recommendations:
                            response += "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
                            for rec in recommendations[:3]:
                                response += f"  ‚Ä¢ {rec}\n"
                        
                        return response
                    else:
                        return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞–º–ø–∞–Ω–∏—é {campaign_id}"
                else:
                    return "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∫–∞–º–ø–∞–Ω–∏–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"
            
            elif intent == 'statistics':
                days_back = params.get('days_back', 7)
                campaign_id = params.get('campaign_id')
                
                result = await self.integration.get_statistics(days_back, campaign_id)
                if result['success']:
                    period = result['period']
                    response = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {period}:\n"
                    response += f"üìÖ –ü–µ—Ä–∏–æ–¥: {result['date_range']['from']} - {result['date_range']['to']}\n"
                    if campaign_id:
                        response += f"üéØ –ö–∞–º–ø–∞–Ω–∏—è: {campaign_id}\n"
                    response += "‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"
                    return response
                else:
                    return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {result['error']}"
            
            elif intent == 'blacklist':
                campaign_id = params.get('campaign_id')
                countries = params.get('countries', [])
                
                if campaign_id and countries:
                    response = f"üö´ –î–æ–±–∞–≤–ª—è—é –≤ –±–ª–µ–∫–ª–∏—Å—Ç –∫–∞–º–ø–∞–Ω–∏–∏ {campaign_id}:\n"
                    response += f"üåç –°—Ç—Ä–∞–Ω—ã: {', '.join(countries)}\n"
                    response += "‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω—ã (–¥–µ–º–æ —Ä–µ–∂–∏–º)"
                    return response
                else:
                    return "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∫–∞–º–ø–∞–Ω–∏–∏ –∏ —Å—Ç—Ä–∞–Ω—ã –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"
            
            elif intent == 'whitelist':
                campaign_id = params.get('campaign_id')
                countries = params.get('countries', [])
                
                if campaign_id and countries:
                    response = f"‚úÖ –î–æ–±–∞–≤–ª—è—é –≤ –≤–∞–π—Ç–ª–∏—Å—Ç –∫–∞–º–ø–∞–Ω–∏–∏ {campaign_id}:\n"
                    response += f"üåç –°—Ç—Ä–∞–Ω—ã: {', '.join(countries)}\n"
                    response += "‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω—ã (–¥–µ–º–æ —Ä–µ–∂–∏–º)"
                    return response
                else:
                    return "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∫–∞–º–ø–∞–Ω–∏–∏ –∏ —Å—Ç—Ä–∞–Ω—ã –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è"
            
            elif intent == 'bid_optimization':
                campaign_id = params.get('campaign_id')
                action = params.get('action', 'optimize')
                
                if campaign_id:
                    response = f"üí∞ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å—Ç–∞–≤–æ–∫ –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏ {campaign_id}:\n"
                    if action == 'increase':
                        response += "üìà –£–≤–µ–ª–∏—á–∏–≤–∞—é —Å—Ç–∞–≤–∫–∏ –Ω–∞ 10%\n"
                    elif action == 'decrease':
                        response += "üìâ –£–º–µ–Ω—å—à–∞—é —Å—Ç–∞–≤–∫–∏ –Ω–∞ 10%\n"
                    else:
                        response += "üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å—Ç–∞–≤–æ–∫\n"
                    response += "‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω—ã (–¥–µ–º–æ —Ä–µ–∂–∏–º)"
                    return response
                else:
                    return "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∫–∞–º–ø–∞–Ω–∏–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞–≤–æ–∫"
            
            elif intent == 'overview':
                result = await self.integration.get_account_overview()
                if result['success']:
                    overview = result['overview']
                    balance = overview.get('balance', {})
                    campaigns = overview.get('campaigns', {})
                    
                    response = f"üìä –û–±–∑–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞:\n"
                    response += f"üí∞ –ë–∞–ª–∞–Ω—Å: ${balance.get('amount', 'N/A')} {balance.get('currency', '')}\n"
                    response += f"üìã –ö–∞–º–ø–∞–Ω–∏–∏: {campaigns.get('total', 0)} –≤—Å–µ–≥–æ, {campaigns.get('active', 0)} –∞–∫—Ç–∏–≤–Ω—ã—Ö\n"
                    response += f"üìà –°—Ç–∞—Ç—É—Å: {overview.get('status', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
                    return response
                else:
                    return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–∑–æ—Ä–∞: {result['error']}"
            
            elif intent == 'help':
                return """üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º):

üí∞ –ë–ê–õ–ê–ù–° –ò –ê–ö–ö–ê–£–ù–¢:
  ‚Ä¢ "–ü–æ–∫–∞–∂–∏ –±–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞"
  ‚Ä¢ "–û–±—â–∏–π –æ–±–∑–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞"

üìã –ö–ê–ú–ü–ê–ù–ò–ò:
  ‚Ä¢ "–ü–æ–∫–∞–∂–∏ —Å–ø–∏—Å–æ–∫ –∫–∞–º–ø–∞–Ω–∏–π"
  ‚Ä¢ "–°–æ–∑–¥–∞–π –∫–∞–º–ø–∞–Ω–∏—é –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞ –≤ –°–®–ê —Å –±—é–¥–∂–µ—Ç–æ–º $200"
  ‚Ä¢ "–ü–æ–∫–∞–∂–∏ –¥–µ—Ç–∞–ª–∏ –∫–∞–º–ø–∞–Ω–∏–∏ 123"
  ‚Ä¢ "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π –∫–∞–º–ø–∞–Ω–∏—é 456"

üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
  ‚Ä¢ "–ü–æ–∫–∞–∂–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –Ω–µ–¥–µ–ª—é"
  ‚Ä¢ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–º–ø–∞–Ω–∏–∏ 123 –∑–∞ –º–µ—Å—è—Ü"

üéØ –¢–ê–†–ì–ï–¢–ò–ù–ì:
  ‚Ä¢ "–î–æ–±–∞–≤—å –†–æ—Å—Å–∏—é –≤ –±–ª–µ–∫–ª–∏—Å—Ç –∫–∞–º–ø–∞–Ω–∏–∏ 123"
  ‚Ä¢ "–†–∞–∑—Ä–µ—à–∏ —Ç—Ä–∞—Ñ–∏–∫ –∏–∑ –°–®–ê –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏ 456"

üí∞ –°–¢–ê–í–ö–ò:
  ‚Ä¢ "–£–≤–µ–ª–∏—á—å —Å—Ç–∞–≤–∫–∏ –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏ 123"
  ‚Ä¢ "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π —Å—Ç–∞–≤–∫–∏ –∫–∞–º–ø–∞–Ω–∏–∏ 456"

–ì–æ–≤–æ—Ä–∏—Ç–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º! üó£Ô∏è"""
            
            else:
                return f"ü§î –ù–µ –ø–æ–Ω—è–ª –∑–∞–ø—Ä–æ—Å: '{text}'\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: '–ø–æ–º–æ—â—å' –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥"
        
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}"
    
    async def run_interactive(self):
        """Run interactive natural language loop"""
        print("üí¨ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä! –ì–æ–≤–æ—Ä–∏—Ç–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º.")
        print("–ù–∞–ø–∏—à–∏—Ç–µ '–≤—ã—Ö–æ–¥' –∏–ª–∏ 'quit' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è\n")
        
        while True:
            try:
                user_input = input("–í—ã: ").strip()
                
                if user_input.lower() in ["–≤—ã—Ö–æ–¥", "quit", "exit", "–ø–æ–∫–∞", "bye"]:
                    print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –£–¥–∞—á–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π!")
                    break
                
                if not user_input:
                    continue
                
                print("ü§ñ Claude: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
                response = await self.process_natural_language(user_input)
                print(f"ü§ñ Claude: {response}")
                print()
                
                # Add to conversation history
                self.conversation_history.append({
                    'user': user_input,
                    'claude': response
                })
                
            except KeyboardInterrupt:
                print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def main():
    """Main function"""
    interface = ClaudeNaturalInterface()
    await interface.run_interactive()

if __name__ == "__main__":
    asyncio.run(main())
