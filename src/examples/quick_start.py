#!/usr/bin/env python3
"""
PropellerAds API Quick Start Example
–®–≤–∏–¥–∫–∏–π –ø—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è API –∫–ª—ñ—î–Ω—Ç–∞
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from propellerads_client import PropellerAdsUltimateClient

def quick_start_demo():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –æ—Å–Ω–æ–≤–Ω–∏—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π API"""
    
    print("üöÄ PROPELLERADS API QUICK START")
    print("=" * 40)
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç–∞
    api_key = os.getenv('MainAPI')
    if not api_key:
        print("‚ùå –ü–æ–º–∏–ª–∫–∞: –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –∑–º—ñ–Ω–Ω—É —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ MainAPI")
        return
    
    client = PropellerAdsUltimateClient(api_key=api_key)
    
    # 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è API
    print("1Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è API...")
    try:
        health = client.health_check()
        print(f"   –°—Ç–∞—Ç—É—Å: {'‚úÖ Healthy' if health['success'] else '‚ùå Unhealthy'}")
        if health['success']:
            print(f"   –ë–∞–ª–∞–Ω—Å: ${health.get('balance', 'N/A')}")
            print(f"   –ö–∞–º–ø–∞–Ω—ñ–π: {health.get('campaigns_count', 'N/A')}")
    except Exception as e:
        print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
    
    # 2. –ë–∞–ª–∞–Ω—Å –∞–∫–∞—É–Ω—Ç–∞
    print("\n2Ô∏è‚É£ –ë–∞–ª–∞–Ω—Å –∞–∫–∞—É–Ω—Ç–∞...")
    try:
        balance = client.get_balance()
        if balance["success"]:
            print(f"   üí∞ –ë–∞–ª–∞–Ω—Å: ${balance['data']}")
        else:
            print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞: {balance.get('error', 'Unknown error')}")
    except Exception as e:
        print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
    
    # 3. –°–ø–∏—Å–æ–∫ –∫–∞–º–ø–∞–Ω—ñ–π
    print("\n3Ô∏è‚É£ –°–ø–∏—Å–æ–∫ –∫–∞–º–ø–∞–Ω—ñ–π...")
    try:
        campaigns = client.get_campaigns(page_size=5)
        if campaigns["success"] and campaigns.get('data', {}).get('result'):
            campaigns_list = campaigns["data"]["result"]
            print(f"   üìä –ó–Ω–∞–π–¥–µ–Ω–æ –∫–∞–º–ø–∞–Ω—ñ–π: {len(campaigns_list)}")
            
            for campaign in campaigns_list[:3]:  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 3
                status_text = "–ê–∫—Ç–∏–≤–Ω–∞" if campaign.get("status") == 1 else "–ù–∞ –ø–∞—É–∑—ñ"
                print(f"   - {campaign.get('name', 'N/A')} (ID: {campaign.get('id', 'N/A')}) - {status_text}")
        else:
            print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞: {campaigns.get('error', 'No campaigns found')}")
    except Exception as e:
        print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
    
    # 4. –î–æ—Å—Ç—É–ø–Ω—ñ –∫—Ä–∞—ó–Ω–∏
    print("\n4Ô∏è‚É£ –î–æ—Å—Ç—É–ø–Ω—ñ –∫—Ä–∞—ó–Ω–∏...")
    try:
        countries = client.get_countries()
        if countries["success"] and countries.get('data', {}).get('result'):
            countries_list = countries["data"]["result"]
            print(f"   üåç –î–æ—Å—Ç—É–ø–Ω–æ –∫—Ä–∞—ó–Ω: {len(countries_list)}")
            print(f"   –ü—Ä–∏–∫–ª–∞–¥–∏: {', '.join([c.get('text', 'N/A') for c in countries_list[:5]])}")
        else:
            print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞: {countries.get('error', 'No countries found')}")
    except Exception as e:
        print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
    
    # 5. –û–ø–µ—Ä–∞—Ü—ñ–π–Ω—ñ —Å–∏—Å—Ç–µ–º–∏
    print("\n5Ô∏è‚É£ –û–ø–µ—Ä–∞—Ü—ñ–π–Ω—ñ —Å–∏—Å—Ç–µ–º–∏...")
    try:
        os_list = client.get_operating_systems()
        if os_list["success"] and os_list.get('data', {}).get('result'):
            os_data = os_list["data"]["result"]
            print(f"   üíª –î–æ—Å—Ç—É–ø–Ω–æ –û–°: {len(os_data)}")
            print(f"   –ü—Ä–∏–∫–ª–∞–¥–∏: {', '.join([os.get('text', 'N/A') for os in os_data[:5]])}")
        else:
            print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞: {os_list.get('error', 'No OS found')}")
    except Exception as e:
        print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
    
    # 6. –ë—Ä–∞—É–∑–µ—Ä–∏
    print("\n6Ô∏è‚É£ –ë—Ä–∞—É–∑–µ—Ä–∏...")
    try:
        browsers = client.get_browsers()
        if browsers["success"] and browsers.get('data', {}).get('result'):
            browsers_data = browsers["data"]["result"]
            print(f"   üåê –î–æ—Å—Ç—É–ø–Ω–æ –±—Ä–∞—É–∑–µ—Ä—ñ–≤: {len(browsers_data)}")
            print(f"   –ü—Ä–∏–∫–ª–∞–¥–∏: {', '.join([b.get('text', 'N/A') for b in browsers_data[:5]])}")
        else:
            print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞: {browsers.get('error', 'No browsers found')}")
    except Exception as e:
        print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
    
    print("\n‚úÖ Quick Start –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\nüí° –ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:")
    print("   - –í–∏–≤—á—ñ—Ç—å docs/api-reference.md –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É –º–µ—Ç–æ–¥—ñ–≤")
    print("   - –ó–∞–ø—É—Å—Ç—ñ—Ç—å workflows/campaign_monitoring.py –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É")
    print("   - –ó–∞–ø—É—Å—Ç—ñ—Ç—å workflows/financial_control.py –¥–ª—è —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—é")
    print("\nüîß Enterprise Features:")
    print("   - Intelligent retry –∑ exponential backoff")
    print("   - Rate limiting –∑ token bucket algorithm")
    print("   - Circuit breaker pattern")
    print("   - Professional logging –∑ Request IDs")
    print("   - Metrics collection")
    print("   - Connection pooling")

if __name__ == "__main__":
    quick_start_demo()
