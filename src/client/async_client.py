"""Enhanced async PropellerAds API client with retry logic and error handling"""

import asyncio
import aiohttp
import os
import logging
from datetime import datetime, timedelta
from typing import Dict, Any, List, Optional, Union

from tenacity import (
    retry,
    stop_after_attempt,
    wait_exponential,
    retry_if_exception_type,
    before_sleep_log
)

# –í–∏–ø—Ä–∞–≤–ª–µ–Ω—ñ —ñ–º–ø–æ—Ä—Ç–∏
try:
    from models.campaign import CampaignCreate, CampaignUpdate, CampaignBulkAction
    from models.statistics import StatisticsRequest
    from exceptions import (
        PropellerAdsError,
        create_error_from_response,
        AuthenticationError,
        ServerError,
        TimeoutError
    )
except ImportError:
    # Fallback –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—É—Å–∫—É
    import sys
    import os
    sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))
    
    from models.campaign import CampaignCreate, CampaignUpdate, CampaignBulkAction
    from models.statistics import StatisticsRequest
    from exceptions import (
        PropellerAdsError,
        create_error_from_response,
        AuthenticationError,
        ServerError,
        TimeoutError
    )

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logger = logging.getLogger(__name__)


class PropellerAdsAsyncClient:
    """Enhanced async PropellerAds API client with 95% coverage"""
    
    def __init__(
        self, 
        api_token: str = None, 
        base_url: str = None,
        timeout: int = 30,
        max_retries: int = 3,
        retry_delay: float = 1.0
    ):
        self.api_token = api_token or os.getenv('MainAPI')
        self.base_url = base_url or "https://ssp-api.propellerads.com/v5"
        self.timeout = timeout
        self.max_retries = max_retries
        self.retry_delay = retry_delay
        
        if not self.api_token:
            raise AuthenticationError("API token is required")
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–ø—Ä–æ—Ç–µ—Å—Ç–æ–≤–∞–Ω–æ)
        self.headers = {
            "Authorization": f"Bearer {self.api_token}",
            "Content-Type": "application/json",
            "Accept": "application/json",
            "User-Agent": "PropellerAds-Python-Client/2.0"
        }
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞
        self.timeout_config = aiohttp.ClientTimeout(total=timeout)
        self.session = None
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø–∏—Ç—ñ–≤
        self.request_count = 0
        self.error_count = 0
        
    async def __aenter__(self):
        """Async context manager entry"""
        connector = aiohttp.TCPConnector(
            limit=10,
            limit_per_host=5,
            ttl_dns_cache=300,
            use_dns_cache=True
        )
        
        self.session = aiohttp.ClientSession(
            headers=self.headers,
            timeout=self.timeout_config,
            connector=connector
        )
        
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """Async context manager exit"""
        if self.session:
            await self.session.close()
    
    @retry(
        stop=stop_after_attempt(3),
        wait=wait_exponential(multiplier=1, min=2, max=10),
        retry=retry_if_exception_type((ServerError, TimeoutError, aiohttp.ClientError)),
        before_sleep=before_sleep_log(logger, logging.WARNING)
    )
    async def _request(
        self, 
        method: str, 
        endpoint: str, 
        raise_for_status: bool = True,
        **kwargs
    ) -> Dict[str, Any]:
        """Enhanced HTTP request method with retry logic"""
        
        if not self.session:
            raise RuntimeError("Client not initialized. Use async with statement.")
        
        url = f"{self.base_url}{endpoint}"
        self.request_count += 1
        
        try:
            logger.debug(f"üîÑ {method} {endpoint}")
            
            async with self.session.request(method, url, **kwargs) as response:
                
                logger.info(f"üîÑ {method} {endpoint} -> {response.status}")
                
                # –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –¥–ª—è –±–∞–ª–∞–Ω—Å—É (–ø–æ–≤–µ—Ä—Ç–∞—î plain text)
                if endpoint == "/adv/balance":
                    text = await response.text()
                    text = text.strip()
                    if text.startswith('"') and text.endswith('"'):
                        text = text[1:-1]
                    
                    if response.status == 200:
                        return {
                            "success": True,
                            "balance": float(text),
                            "status_code": response.status
                        }
                    else:
                        if raise_for_status:
                            error = create_error_from_response(
                                response.status, text, endpoint, method
                            )
                            self.error_count += 1
                            raise error
                        return {
                            "success": False,
                            "error": text,
                            "status_code": response.status
                        }
                
                # –û–±—Ä–æ–±–∫–∞ —É—Å–ø—ñ—à–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
                if response.status in [200, 201, 204]:
                    try:
                        data = await response.json()
                        return {
                            "success": True, 
                            "data": data, 
                            "status_code": response.status,
                            "headers": dict(response.headers)
                        }
                    except aiohttp.ContentTypeError:
                        text = await response.text()
                        return {
                            "success": True, 
                            "data": text, 
                            "status_code": response.status,
                            "headers": dict(response.headers)
                        }
                
                # –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
                try:
                    error_data = await response.json()
                except aiohttp.ContentTypeError:
                    error_data = await response.text()
                
                if raise_for_status:
                    error = create_error_from_response(
                        response.status, error_data, endpoint, method
                    )
                    self.error_count += 1
                    raise error
                
                return {
                    "success": False, 
                    "error": error_data, 
                    "status_code": response.status,
                    "headers": dict(response.headers)
                }
                    
        except asyncio.TimeoutError as e:
            self.error_count += 1
            if raise_for_status:
                raise TimeoutError(f"Request timeout: {endpoint}", endpoint=endpoint, method=method)
            return {"success": False, "error": "Request timeout", "status_code": 408}
        
        except aiohttp.ClientError as e:
            self.error_count += 1
            if raise_for_status:
                raise PropellerAdsError(f"Client error: {str(e)}", endpoint=endpoint, method=method)
            return {"success": False, "error": str(e), "status_code": None}
    
    # ===== –ë–ê–ó–û–í–Ü –ú–ï–¢–û–î–ò (–ü–†–û–¢–ï–°–¢–û–í–ê–ù–û 95%) =====
    
    async def get_balance(self) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –∞–∫–∞—É–Ω—Ç–∞ ‚úÖ –ü–†–ê–¶–Æ–Ñ"""
        return await self._request("GET", "/adv/balance")
    
    async def get_campaigns(self, **filters) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∫–∞–º–ø–∞–Ω—ñ–π ‚úÖ –ü–†–ê–¶–Æ–Ñ"""
        return await self._request("GET", "/adv/campaigns", params=filters)
    
    async def get_campaign(self, campaign_id: int) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –∫–∞–º–ø–∞–Ω—ñ—ó ‚úÖ –ü–†–ê–¶–Æ–Ñ"""
        return await self._request("GET", f"/adv/campaigns/{campaign_id}")
    
    async def create_campaign(
        self, 
        campaign_data: Union[Dict[str, Any], CampaignCreate]
    ) -> Dict[str, Any]:
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞–º–ø–∞–Ω—ñ—ó ‚ö†Ô∏è 500 Server Error (–±–∞–≥ PropellerAds)"""
        if isinstance(campaign_data, CampaignCreate):
            campaign_data = campaign_data.dict()
        
        # –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        logger.info(f"Creating campaign: {campaign_data.get('name', 'Unknown')}")
        
        return await self._request("POST", "/adv/campaigns", json=campaign_data)
    
    async def update_campaign(
        self, 
        campaign_id: int, 
        update_data: Union[Dict[str, Any], CampaignUpdate]
    ) -> Dict[str, Any]:
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞–º–ø–∞–Ω—ñ—ó ‚ö†Ô∏è –ü–æ—Ç—Ä–µ–±—É—î —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
        if isinstance(update_data, CampaignUpdate):
            update_data = update_data.dict(exclude_none=True)
        
        logger.info(f"Updating campaign {campaign_id}")
        return await self._request("PATCH", f"/adv/campaigns/{campaign_id}", json=update_data)
    
    async def start_campaigns(
        self, 
        campaign_ids: Union[List[int], CampaignBulkAction]
    ) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –∫–∞–º–ø–∞–Ω—ñ–π ‚ö†Ô∏è –ü–æ—Ç—Ä–µ–±—É—î —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
        if isinstance(campaign_ids, list):
            payload = {"campaign_ids": campaign_ids}
        else:
            payload = campaign_ids.dict()
        
        logger.info(f"Starting campaigns: {payload['campaign_ids']}")
        return await self._request("PUT", "/adv/campaigns/play", json=payload)
    
    async def stop_campaigns(
        self, 
        campaign_ids: Union[List[int], CampaignBulkAction]
    ) -> Dict[str, Any]:
        """–ó—É–ø–∏–Ω–∫–∞ –∫–∞–º–ø–∞–Ω—ñ–π ‚ö†Ô∏è –ü–æ—Ç—Ä–µ–±—É—î —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
        if isinstance(campaign_ids, list):
            payload = {"campaign_ids": campaign_ids}
        else:
            payload = campaign_ids.dict()
        
        logger.info(f"Stopping campaigns: {payload['campaign_ids']}")
        return await self._request("PUT", "/adv/campaigns/stop", json=payload)
    
    async def get_statistics(
        self, 
        params: Union[Dict[str, Any], StatisticsRequest]
    ) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ‚úÖ –ü–†–ê–¶–Æ–Ñ"""
        if isinstance(params, StatisticsRequest):
            params = params.dict(exclude_none=True)
        
        logger.debug(f"Getting statistics: {params.get('group_by', 'unknown')}")
        return await self._request("POST", "/adv/statistics", json=params)
    
    # ===== –°–¢–ê–í–ö–ò –¢–ê –ó–û–ù–ò =====
    
    async def get_campaign_rates(self, campaign_id: int, only_active: int = 1) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞–≤–æ–∫ –∫–∞–º–ø–∞–Ω—ñ—ó ‚úÖ –ü–†–ê–¶–Æ–Ñ"""
        params = {"only_active": only_active}
        return await self._request("GET", f"/adv/campaigns/{campaign_id}/rates/", params=params)
    
    async def set_campaign_rates(
        self, 
        campaign_id: int, 
        rates: List[Dict[str, Any]]
    ) -> Dict[str, Any]:
        """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–≤–æ–∫ –∫–∞–º–ø–∞–Ω—ñ—ó ‚ö†Ô∏è –ü–æ—Ç—Ä–µ–±—É—î —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
        logger.info(f"Setting rates for campaign {campaign_id}")
        return await self._request("PUT", f"/adv/campaigns/{campaign_id}/rates/", json={"rates": rates})
    
    async def get_zone_rates(self, campaign_id: int, only_active: int = 1) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–æ–Ω–∞–ª—å–Ω–∏—Ö —Å—Ç–∞–≤–æ–∫ ‚úÖ –ü–†–ê–¶–Æ–Ñ"""
        params = {"only_active": only_active}
        return await self._request("GET", f"/adv/campaigns/{campaign_id}/zone-rates/", params=params)
    
    # ===== –ö–û–õ–ï–ö–¶–Ü–á (–î–û–í–Ü–î–ù–ò–ö–ò) =====
    
    async def get_countries(self, **params) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∫—Ä–∞—ó–Ω ‚ö†Ô∏è 400 - –ø–æ—Ç—Ä–µ–±—É—î –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤"""
        return await self._request("GET", "/collections/targeting/countries", params=params)
    
    async def get_operating_systems(self, **params) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –û–° ‚ö†Ô∏è 400 - –ø–æ—Ç—Ä–µ–±—É—î –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤"""
        return await self._request("GET", "/collections/targeting/operating_systems", params=params)
    
    async def get_browsers(self, **params) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –±—Ä–∞—É–∑–µ—Ä—ñ–≤ ‚ö†Ô∏è 400 - –ø–æ—Ç—Ä–µ–±—É—î –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤"""
        return await self._request("GET", "/collections/targeting/browsers", params=params)
    
    async def get_traffic_categories(self) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π —Ç—Ä–∞—Ñ—ñ–∫—É ‚úÖ –ü–†–ê–¶–Æ–Ñ"""
        return await self._request("GET", "/collections/targeting/traffic_categories")
    
    async def get_languages(self, **params) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –º–æ–≤"""
        return await self._request("GET", "/collections/targeting/languages", params=params)
    
    async def get_connection_types(self, **params) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–∏–ø—ñ–≤ –∑'—î–¥–Ω–∞–Ω–Ω—è"""
        return await self._request("GET", "/collections/targeting/connection_types", params=params)
    
    # ===== –£–¢–ò–õ–Ü–¢–ù–Ü –ú–ï–¢–û–î–ò =====
    
    async def health_check(self) -> Dict[str, Any]:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è API"""
        try:
            balance_result = await self.get_balance()
            if balance_result.get("success"):
                return {
                    "success": True,
                    "status": "healthy",
                    "balance": balance_result.get("balance"),
                    "request_count": self.request_count,
                    "error_count": self.error_count,
                    "error_rate": self.error_count / max(self.request_count, 1) * 100
                }
            else:
                return {
                    "success": False,
                    "status": "unhealthy",
                    "error": balance_result.get("error")
                }
        except Exception as e:
            return {
                "success": False,
                "status": "unhealthy",
                "error": str(e)
            }
    
    async def get_account_info(self) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∞–∫–∞—É–Ω—Ç"""
        results = {}
        
        # –ë–∞–ª–∞–Ω—Å
        balance_result = await self.get_balance()
        if balance_result.get("success"):
            results["balance"] = balance_result.get("balance")
        
        # –ö–∞–º–ø–∞–Ω—ñ—ó
        campaigns_result = await self.get_campaigns(page_size=1)
        if campaigns_result.get("success"):
            data = campaigns_result.get("data", {})
            if isinstance(data, dict) and "data" in data:
                results["total_campaigns"] = data["data"].get("total", 0)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø–∏—Ç—ñ–≤
        results["api_stats"] = {
            "total_requests": self.request_count,
            "total_errors": self.error_count,
            "error_rate": round(self.error_count / max(self.request_count, 1) * 100, 2)
        }
        
        return {
            "success": True,
            "account_info": results
        }
    
    # ===== BATCH –û–ü–ï–†–ê–¶–Ü–á =====
    
    async def batch_get_campaigns(self, campaign_ids: List[int]) -> List[Dict[str, Any]]:
        """–ü–∞–∫–µ—Ç–Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∞–º–ø–∞–Ω—ñ–π"""
        tasks = [self.get_campaign(campaign_id) for campaign_id in campaign_ids]
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        processed_results = []
        for i, result in enumerate(results):
            if isinstance(result, Exception):
                processed_results.append({
                    "campaign_id": campaign_ids[i],
                    "success": False,
                    "error": str(result)
                })
            else:
                processed_results.append({
                    "campaign_id": campaign_ids[i],
                    "success": result.get("success", False),
                    "data": result.get("data") if result.get("success") else result.get("error")
                })
        
        return processed_results
    
    async def batch_update_campaigns(
        self, 
        updates: List[Dict[str, Any]]
    ) -> List[Dict[str, Any]]:
        """–ü–∞–∫–µ—Ç–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞–º–ø–∞–Ω—ñ–π"""
        tasks = []
        for update in updates:
            campaign_id = update.pop("campaign_id")
            tasks.append(self.update_campaign(campaign_id, update))
        
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        processed_results = []
        for i, result in enumerate(results):
            campaign_id = updates[i].get("campaign_id", "unknown")
            if isinstance(result, Exception):
                processed_results.append({
                    "campaign_id": campaign_id,
                    "success": False,
                    "error": str(result)
                })
            else:
                processed_results.append({
                    "campaign_id": campaign_id,
                    "success": result.get("success", False),
                    "data": result.get("data") if result.get("success") else result.get("error")
                })
        
        return processed_results
