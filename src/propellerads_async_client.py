#!/usr/bin/env python3
"""
PropellerAds Async API Client
–ù–∞ –æ—Å–Ω–æ–≤—ñ –∑–Ω–∞—Ö—ñ–¥–æ–∫ –∑ MCP —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é JanNafta/propellerads-mcp
"""

import asyncio
import aiohttp
import os
import json
from datetime import datetime
from typing import Dict, Any, List, Optional

class PropellerAdsAsyncClient:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –∫–ª—ñ—î–Ω—Ç –¥–ª—è PropellerAds API v5"""
    
    def __init__(self, api_token: str = None, base_url: str = None):
        self.api_token = api_token or os.getenv('MainAPI')
        self.base_url = base_url or "https://ssp-api.propellerads.com/v5"
        
        if not self.api_token:
            raise ValueError("API token is required")
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–≥—ñ–¥–Ω–æ –∑ MCP
        self.headers = {
            "Authorization": f"Bearer {self.api_token}",
            "Content-Type": "application/json",
            "Accept": "application/json"
        }
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞
        self.timeout = aiohttp.ClientTimeout(total=30)
        self.session = None
    
    async def __aenter__(self):
        """Async context manager entry"""
        self.session = aiohttp.ClientSession(
            headers=self.headers,
            timeout=self.timeout,
            connector=aiohttp.TCPConnector(limit=10)
        )
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """Async context manager exit"""
        if self.session:
            await self.session.close()
    
    async def _request(self, method: str, endpoint: str, **kwargs) -> Dict[str, Any]:
        """–ë–∞–∑–æ–≤–∏–π –º–µ—Ç–æ–¥ –¥–ª—è HTTP –∑–∞–ø–∏—Ç—ñ–≤"""
        if not self.session:
            raise RuntimeError("Client not initialized. Use async with statement.")
        
        # –§–æ—Ä–º—É—î–º–æ URL
        url = f"{self.base_url}{endpoint}"
        
        try:
            async with self.session.request(method, url, **kwargs) as response:
                
                # –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É
                print(f"üîÑ {method} {endpoint} -> {response.status}")
                
                # –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –¥–ª—è –±–∞–ª–∞–Ω—Å—É (–ø–æ–≤–µ—Ä—Ç–∞—î plain text)
                if endpoint == "/adv/balance":
                    text = await response.text()
                    text = text.strip()
                    # –í–∏–¥–∞–ª—è—î–º–æ –ª–∞–ø–∫–∏ —è–∫—â–æ —î
                    if text.startswith('"') and text.endswith('"'):
                        text = text[1:-1]
                    return {"balance": text, "status_code": response.status}
                
                # –û–±—Ä–æ–±–∫–∞ —É—Å–ø—ñ—à–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
                if response.status in [200, 201, 204]:
                    try:
                        data = await response.json()
                        return {"success": True, "data": data, "status_code": response.status}
                    except:
                        text = await response.text()
                        return {"success": True, "data": text, "status_code": response.status}
                
                # –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
                try:
                    error_data = await response.json()
                    return {
                        "success": False, 
                        "error": error_data, 
                        "status_code": response.status
                    }
                except:
                    text = await response.text()
                    return {
                        "success": False, 
                        "error": text, 
                        "status_code": response.status
                    }
                    
        except asyncio.TimeoutError:
            return {"success": False, "error": "Request timeout", "status_code": 408}
        except Exception as e:
            return {"success": False, "error": str(e), "status_code": None}
    
    # === –ë–ê–ó–û–í–Ü –ú–ï–¢–û–î–ò ===
    
    async def get_balance(self) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –∞–∫–∞—É–Ω—Ç–∞"""
        return await self._request("GET", "/adv/balance")
    
    # === –ö–ê–ú–ü–ê–ù–Ü–á ===
    
    async def get_campaigns(self, **filters) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∫–∞–º–ø–∞–Ω—ñ–π –∑ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏"""
        return await self._request("GET", "/adv/campaigns", params=filters)
    
    async def get_campaign(self, campaign_id: int) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É –∫–∞–º–ø–∞–Ω—ñ—é"""
        return await self._request("GET", f"/adv/campaigns/{campaign_id}")
    
    async def create_campaign(self, campaign_data: Dict[str, Any]) -> Dict[str, Any]:
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –∫–∞–º–ø–∞–Ω—ñ—ó"""
        return await self._request("POST", "/adv/campaigns", json=campaign_data)
    
    async def update_campaign(self, campaign_id: int, update_data: Dict[str, Any]) -> Dict[str, Any]:
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞–º–ø–∞–Ω—ñ—ó"""
        return await self._request("PATCH", f"/adv/campaigns/{campaign_id}", json=update_data)
    
    async def start_campaigns(self, campaign_ids: List[int]) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –∫–∞–º–ø–∞–Ω—ñ–π"""
        return await self._request("PUT", "/adv/campaigns/play", json={"campaign_ids": campaign_ids})
    
    async def stop_campaigns(self, campaign_ids: List[int]) -> Dict[str, Any]:
        """–ó—É–ø–∏–Ω–∫–∞ –∫–∞–º–ø–∞–Ω—ñ–π"""
        return await self._request("PUT", "/adv/campaigns/stop", json={"campaign_ids": campaign_ids})
    
    # === –°–¢–ê–í–ö–ò ===
    
    async def get_campaign_rates(self, campaign_id: int, only_active: int = 1) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞–≤–æ–∫ –∫–∞–º–ø–∞–Ω—ñ—ó"""
        params = {"only_active": only_active}
        return await self._request("GET", f"/adv/campaigns/{campaign_id}/rates/", params=params)
    
    async def set_campaign_rates(self, campaign_id: int, rates: List[Dict[str, Any]]) -> Dict[str, Any]:
        """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–≤–æ–∫ –∫–∞–º–ø–∞–Ω—ñ—ó"""
        return await self._request("PUT", f"/adv/campaigns/{campaign_id}/rates/", json={"rates": rates})
    
    async def get_zone_rates(self, campaign_id: int, only_active: int = 1) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–æ–Ω–∞–ª—å–Ω–∏—Ö —Å—Ç–∞–≤–æ–∫"""
        params = {"only_active": only_active}
        return await self._request("GET", f"/adv/campaigns/{campaign_id}/zone-rates/", params=params)
    
    # === –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===
    
    async def get_statistics(self, **params) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        return await self._request("POST", "/adv/statistics", json=params)
    
    # === –ö–û–õ–ï–ö–¶–Ü–á ===
    
    async def get_countries(self) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∫—Ä–∞—ó–Ω"""
        return await self._request("GET", "/collections/targeting/countries")
    
    async def get_operating_systems(self) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –û–°"""
        return await self._request("GET", "/collections/targeting/operating_systems")
    
    async def get_browsers(self) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –±—Ä–∞—É–∑–µ—Ä—ñ–≤"""
        return await self._request("GET", "/collections/targeting/browsers")
    
    async def get_traffic_categories(self) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π —Ç—Ä–∞—Ñ—ñ–∫—É"""
        return await self._request("GET", "/collections/targeting/traffic_categories")

# === –¢–ï–°–¢–£–í–ê–ù–ù–Ø ===

async def test_async_client():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞"""
    print("üöÄ –¢–ï–°–¢–£–í–ê–ù–ù–Ø ASYNC PROPELLERADS CLIENT")
    print("=" * 50)
    
    async with PropellerAdsAsyncClient() as client:
        
        # 1. –¢–µ—Å—Ç –±–∞–ª–∞–Ω—Å—É
        print("\n1Ô∏è‚É£ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É...")
        balance = await client.get_balance()
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {balance}")
        
        # 2. –¢–µ—Å—Ç –∫–∞–º–ø–∞–Ω—ñ–π
        print("\n2Ô∏è‚É£ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∫–∞–º–ø–∞–Ω—ñ–π...")
        campaigns = await client.get_campaigns(page_size=5)
        print(f"   –°—Ç–∞—Ç—É—Å: {campaigns.get('status_code')}")
        print(f"   –£—Å–ø—ñ—Ö: {campaigns.get('success')}")
        
        if campaigns.get('success') and campaigns.get('data'):
            campaign_data = campaigns['data']
            if isinstance(campaign_data, dict) and 'data' in campaign_data:
                campaigns_list = campaign_data['data'].get('result', [])
                print(f"   –ö–∞–º–ø–∞–Ω—ñ–π –∑–Ω–∞–π–¥–µ–Ω–æ: {len(campaigns_list)}")
                
                # –¢–µ—Å—Ç—É—î–º–æ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–∞–º–ø–∞–Ω—ñ—è–º–∏ —è–∫—â–æ —î
                if campaigns_list:
                    campaign_id = campaigns_list[0]['id']
                    print(f"\n3Ô∏è‚É£ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–∞–º–ø–∞–Ω—ñ—î—é ID: {campaign_id}")
                    
                    # –¢–µ—Å—Ç –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞–≤–æ–∫
                    rates = await client.get_campaign_rates(campaign_id)
                    print(f"   –°—Ç–∞–≤–∫–∏ - –°—Ç–∞—Ç—É—Å: {rates.get('status_code')}, –£—Å–ø—ñ—Ö: {rates.get('success')}")
                    
                    # –¢–µ—Å—Ç –∑–æ–Ω–∞–ª—å–Ω–∏—Ö —Å—Ç–∞–≤–æ–∫
                    zone_rates = await client.get_zone_rates(campaign_id)
                    print(f"   –ó–æ–Ω–∞–ª—å–Ω—ñ —Å—Ç–∞–≤–∫–∏ - –°—Ç–∞—Ç—É—Å: {zone_rates.get('status_code')}, –£—Å–ø—ñ—Ö: {zone_rates.get('success')}")
        
        # 3. –¢–µ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞–º–ø–∞–Ω—ñ—ó
        print("\n4Ô∏è‚É£ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞–º–ø–∞–Ω—ñ—ó...")
        
        # –°–ø–æ—á–∞—Ç–∫—É –æ—Ç—Ä–∏–º—É—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç—Ä–∞—Ñ—ñ–∫—É
        traffic_cats = await client.get_traffic_categories()
        available_cats = ["mainstream"]  # –¥–µ—Ñ–æ–ª—Ç
        
        print(f"   Traffic cats result: {traffic_cats}")
        
        if traffic_cats.get('success') and traffic_cats.get('data'):
            cats_data = traffic_cats['data']
            print(f"   Cats data type: {type(cats_data)}")
            print(f"   Cats data: {cats_data}")
            
            if isinstance(cats_data, dict) and 'result' in cats_data:
                # –†–µ–∑—É–ª—å—Ç–∞—Ç - —Ü–µ —Å–ø–∏—Å–æ–∫ —Ä—è–¥–∫—ñ–≤, –∞ –Ω–µ –æ–±'—î–∫—Ç—ñ–≤
                result_list = cats_data['result']
                if result_list and isinstance(result_list, list):
                    available_cats = [result_list[0]]  # –ë–µ—Ä–µ–º–æ –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç
            elif isinstance(cats_data, list):
                available_cats = [cat.get('value', 'mainstream') if isinstance(cat, dict) else str(cat) for cat in cats_data[:1]]
            else:
                print(f"   Unexpected data format, using default")
        
        campaign_data = {
            "name": f"Async Test {int(datetime.now().timestamp())}",
            "direction": "onclick",
            "rate_model": "cpm",
            "target_url": "https://example.com",
            "status": 0,  # –ù–µ–∞–∫—Ç–∏–≤–Ω–∞
            "targeting": {
                "traffic_categories": {
                    "list": available_cats,
                    "is_excluded": False
                }
            }
        }
        
        create_result = await client.create_campaign(campaign_data)
        print(f"   –°—Ç–≤–æ—Ä–µ–Ω–Ω—è - –°—Ç–∞—Ç—É—Å: {create_result.get('status_code')}, –£—Å–ø—ñ—Ö: {create_result.get('success')}")
        if not create_result.get('success'):
            print(f"   –ü–æ–º–∏–ª–∫–∞: {create_result.get('error')}")
        
        # 4. –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        print("\n5Ô∏è‚É£ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
        stats_params = {
            "day_from": "2025-09-22 00:00:00",
            "day_to": "2025-09-29 23:59:59",
            "tz": "+0000",
            "group_by": ["campaign_id"]
        }
        
        stats = await client.get_statistics(**stats_params)
        print(f"   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –°—Ç–∞—Ç—É—Å: {stats.get('status_code')}, –£—Å–ø—ñ—Ö: {stats.get('success')}")
        
        # 5. –¢–µ—Å—Ç –∫–æ–ª–µ–∫—Ü—ñ–π
        print("\n6Ô∏è‚É£ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–æ–ª–µ–∫—Ü—ñ–π...")
        
        collections_tests = [
            ("–ö—Ä–∞—ó–Ω–∏", client.get_countries()),
            ("–û–°", client.get_operating_systems()),
            ("–ë—Ä–∞—É–∑–µ—Ä–∏", client.get_browsers()),
            ("–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç—Ä–∞—Ñ—ñ–∫—É", client.get_traffic_categories())
        ]
        
        for name, coro in collections_tests:
            result = await coro
            print(f"   {name} - –°—Ç–∞—Ç—É—Å: {result.get('status_code')}, –£—Å–ø—ñ—Ö: {result.get('success')}")
    
    print("\n‚úÖ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    try:
        await test_async_client()
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {e}")

if __name__ == "__main__":
    asyncio.run(main())
