#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ PropellerAds API —Ç–æ–∫–µ–Ω–∞
–ë–∞–∑—É—î—Ç—å—Å—è –Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è—Ö Claude
"""

import requests
import os
import json
from datetime import datetime

API_KEY = os.getenv('MainAPI')
BASE_URL = "https://ssp-api.propellerads.com/v5"

def diagnose_token():
    """–î–µ—Ç–∞–ª—å–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–æ–∫–µ–Ω–∞"""
    print("üîç –î–ï–¢–ê–õ–¨–ù–ê –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê PropellerAds API –¢–û–ö–ï–ù–ê")
    print("=" * 60)
    
    if not API_KEY:
        print("‚ùå API –∫–ª—é—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return
    
    print(f"üîë API –∫–ª—é—á: ...{API_KEY[-8:]}")
    print(f"üåê Base URL: {BASE_URL}")
    
    headers = {
        "Authorization": f"Bearer {API_KEY}",
        "Content-Type": "application/json",
        "Accept": "application/json",
        "User-Agent": "PropellerAds-API-Diagnostic/1.0"
    }
    
    print(f"üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏: {json.dumps(headers, indent=2)}")
    
    # 1. –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–æ–∫–µ–Ω
    print("\n1Ô∏è‚É£ –ü–ï–†–ï–í–Ü–†–ö–ê –Ü–ù–§–û–†–ú–ê–¶–Ü–á –ü–†–û –¢–û–ö–ï–ù")
    print("-" * 40)
    
    token_endpoints = [
        "/adv/token/info",
        "/token/info", 
        "/auth/token/info",
        "/user/token/info"
    ]
    
    for endpoint in token_endpoints:
        url = f"{BASE_URL}{endpoint}"
        print(f"–°–ø—Ä–æ–±–∞: {endpoint}")
        
        try:
            response = requests.get(url, headers=headers, timeout=10)
            print(f"  –°—Ç–∞—Ç—É—Å: {response.status_code}")
            if response.status_code == 200:
                try:
                    data = response.json()
                    print(f"  ‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å: {json.dumps(data, indent=4)}")
                    break
                except:
                    print(f"  ‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å (—Ç–µ–∫—Å—Ç): {response.text}")
                    break
            else:
                print(f"  ‚ùå –ü–æ–º–∏–ª–∫–∞: {response.text[:100]}")
        except Exception as e:
            print(f"  ‚ùå –í–∏–∫–ª—é—á–µ–Ω–Ω—è: {e}")
    
    # 2. –î–µ—Ç–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ GET –∑–∞–ø–∏—Ç—É (–ø—Ä–∞—Ü—é—î)
    print("\n2Ô∏è‚É£ –î–ï–¢–ê–õ–¨–ù–ê –ü–ï–†–ï–í–Ü–†–ö–ê GET –ó–ê–ü–ò–¢–£")
    print("-" * 40)
    
    try:
        response = requests.get(f"{BASE_URL}/adv/balance", headers=headers, timeout=10)
        print(f"GET /adv/balance:")
        print(f"  –°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"  –ó–∞–≥–æ–ª–æ–≤–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {dict(response.headers)}")
        print(f"  –í—ñ–¥–ø–æ–≤—ñ–¥—å: {response.text}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        if 'X-RateLimit-Limit' in response.headers:
            print(f"  Rate Limit: {response.headers['X-RateLimit-Limit']}")
        if 'X-RateLimit-Remaining' in response.headers:
            print(f"  –ó–∞–ª–∏—à–∏–ª–æ—Å—å –∑–∞–ø–∏—Ç—ñ–≤: {response.headers['X-RateLimit-Remaining']}")
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ GET –∑–∞–ø–∏—Ç—É: {e}")
    
    # 3. –î–µ—Ç–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ POST –∑–∞–ø–∏—Ç—É (–Ω–µ –ø—Ä–∞—Ü—é—î)
    print("\n3Ô∏è‚É£ –î–ï–¢–ê–õ–¨–ù–ê –ü–ï–†–ï–í–Ü–†–ö–ê POST –ó–ê–ü–ò–¢–£")
    print("-" * 40)
    
    # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π POST –∑–∞–ø–∏—Ç –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats_data = {
        "day_from": "2025-09-01 00:00:00",
        "day_to": "2025-09-28 23:59:59",
        "tz": "+0000"
    }
    
    print(f"POST /adv/statistics:")
    print(f"  –î–∞–Ω—ñ: {json.dumps(stats_data, indent=2)}")
    
    try:
        response = requests.post(
            f"{BASE_URL}/adv/statistics",
            headers=headers,
            json=stats_data,
            timeout=10
        )
        print(f"  –°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"  –ó–∞–≥–æ–ª–æ–≤–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {dict(response.headers)}")
        print(f"  –í—ñ–¥–ø–æ–≤—ñ–¥—å: {response.text}")
        
        if response.status_code == 400:
            try:
                error_data = response.json()
                print(f"  üìã –î–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏: {json.dumps(error_data, indent=4)}")
            except:
                pass
                
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ POST –∑–∞–ø–∏—Ç—É: {e}")
    
    # 4. –°–ø—Ä–æ–±–∞ –Ω–∞–π–ø—Ä–æ—Å—Ç—ñ—à–æ–≥–æ POST –∑–∞–ø–∏—Ç—É
    print("\n4Ô∏è‚É£ –ù–ê–ô–ü–†–û–°–¢–Ü–®–ò–ô POST –ó–ê–ü–ò–¢")
    print("-" * 40)
    
    simple_campaign = {
        "name": f"Diagnostic Test {int(datetime.now().timestamp())}",
        "direction": "onclick",
        "rate_model": "cpm",
        "target_url": "https://example.com",
        "status": 0  # –ü–∞—É–∑–∞
    }
    
    print(f"POST /adv/campaigns (–º—ñ–Ω—ñ–º–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ):")
    print(f"  –î–∞–Ω—ñ: {json.dumps(simple_campaign, indent=2)}")
    
    try:
        response = requests.post(
            f"{BASE_URL}/adv/campaigns",
            headers=headers,
            json=simple_campaign,
            timeout=10
        )
        print(f"  –°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"  –ó–∞–≥–æ–ª–æ–≤–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {dict(response.headers)}")
        print(f"  –í—ñ–¥–ø–æ–≤—ñ–¥—å: {response.text}")
        
        if response.status_code == 403:
            print("  üîç 403 Access Denied - –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º—É –∑ –ø—Ä–∞–≤–∞–º–∏")
        elif response.status_code == 400:
            try:
                error_data = response.json()
                print(f"  üìã –î–µ—Ç–∞–ª—ñ 400 –ø–æ–º–∏–ª–∫–∏: {json.dumps(error_data, indent=4)}")
            except:
                pass
                
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞–º–ø–∞–Ω—ñ—ó: {e}")
    
    # 5. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä—ñ–∑–Ω–∏—Ö –º–µ—Ç–æ–¥—ñ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
    print("\n5Ô∏è‚É£ –ü–ï–†–ï–í–Ü–†–ö–ê –†–Ü–ó–ù–ò–• –ú–ï–¢–û–î–Ü–í –ê–í–¢–û–†–ò–ó–ê–¶–Ü–á")
    print("-" * 40)
    
    auth_variants = [
        {"Authorization": f"Bearer {API_KEY}"},
        {"Authorization": f"Token {API_KEY}"},
        {"X-API-Key": API_KEY},
        {"api-key": API_KEY}
    ]
    
    for i, auth_header in enumerate(auth_variants, 1):
        print(f"–í–∞—Ä—ñ–∞–Ω—Ç {i}: {auth_header}")
        test_headers = {**headers, **auth_header}
        
        try:
            response = requests.get(f"{BASE_URL}/adv/balance", headers=test_headers, timeout=5)
            print(f"  –°—Ç–∞—Ç—É—Å: {response.status_code}")
            if response.status_code == 200:
                print(f"  ‚úÖ –ü—Ä–∞—Ü—é—î!")
            else:
                print(f"  ‚ùå –ù–µ –ø—Ä–∞—Ü—é—î: {response.text[:50]}")
        except Exception as e:
            print(f"  ‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
    
    # 6. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
    print("\n6Ô∏è‚É£ –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á")
    print("-" * 40)
    print("–ë–∞–∑—É—é—á–∏—Å—å –Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏—Ü—ñ:")
    print("1. –Ø–∫—â–æ GET –ø—Ä–∞—Ü—é—î, –∞ POST/PUT –ø–æ–≤–µ—Ä—Ç–∞—é—Ç—å 403 - –ø—Ä–æ–±–ª–µ–º–∞ –≤ –ø—Ä–∞–≤–∞—Ö —Ç–æ–∫–µ–Ω–∞")
    print("2. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ PropellerAds –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ü—ñ—î—ó –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
    print("3. –ü–æ–ø—Ä–æ—Å—ñ—Ç—å –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—Ä–∞–≤–∞ —Ç–æ–∫–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º—ñ")
    print("4. –ú–æ–∂–ª–∏–≤–æ –ø–æ—Ç—Ä—ñ–±–µ–Ω —Ç–æ–∫–µ–Ω –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–º–∏ –ø—Ä–∞–≤–∞–º–∏")
    print("5. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —á–∏ —î –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤ –ø—Ä–æ—Ñ—ñ–ª—ñ SSP")
    
    print(f"\nüìÖ –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {datetime.now().isoformat()}")

if __name__ == "__main__":
    diagnose_token()
