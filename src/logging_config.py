#!/usr/bin/env python3
"""
–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è PropellerAds API –∫–ª—ñ—î–Ω—Ç—ñ–≤
"""

import logging
import sys
from datetime import datetime
from pathlib import Path


class PropellerAdsFormatter(logging.Formatter):
    """–ö–∞—Å—Ç–æ–º–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç–µ—Ä –¥–ª—è PropellerAds –ª–æ–≥—ñ–≤"""
    
    def format(self, record):
        # –î–æ–¥–∞—î–º–æ –∫–æ–ª—å–æ—Ä–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ä—ñ–≤–Ω—ñ–≤
        colors = {
            'DEBUG': '\033[36m',    # Cyan
            'INFO': '\033[32m',     # Green
            'WARNING': '\033[33m',  # Yellow
            'ERROR': '\033[31m',    # Red
            'CRITICAL': '\033[35m', # Magenta
        }
        reset = '\033[0m'
        
        # –§–æ—Ä–º–∞—Ç—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        timestamp = datetime.fromtimestamp(record.created).strftime('%Y-%m-%d %H:%M:%S')
        level_color = colors.get(record.levelname, '')
        
        formatted = f"{level_color}[{timestamp}] {record.levelname:<8}{reset} "
        formatted += f"{record.name}: {record.getMessage()}"
        
        # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤–∏–Ω—è—Ç–æ–∫ —è–∫—â–æ —î
        if record.exc_info:
            formatted += f"\n{self.formatException(record.exc_info)}"
        
        return formatted


def setup_logging(
    level: str = "INFO",
    log_file: str = None,
    console: bool = True,
    format_style: str = "detailed"
) -> logging.Logger:
    """
    –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è PropellerAds API
    
    Args:
        level: –†—ñ–≤–µ–Ω—å –ª–æ–≥—É–≤–∞–Ω–Ω—è (DEBUG, INFO, WARNING, ERROR, CRITICAL)
        log_file: –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –ª–æ–≥—ñ–≤ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
        console: –ß–∏ –≤–∏–≤–æ–¥–∏—Ç–∏ –ª–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
        format_style: –°—Ç–∏–ª—å —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è ('simple' –∞–±–æ 'detailed')
    
    Returns:
        –ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π logger
    """
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π logger
    logger = logging.getLogger('propellerads')
    logger.setLevel(getattr(logging, level.upper()))
    
    # –û—á–∏—â—É—î–º–æ —ñ—Å–Ω—É—é—á—ñ handlers
    logger.handlers.clear()
    
    # –§–æ—Ä–º–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    if format_style == "simple":
        format_string = "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
        formatter = logging.Formatter(format_string)
    else:
        formatter = PropellerAdsFormatter()
    
    # Console handler
    if console:
        console_handler = logging.StreamHandler(sys.stdout)
        console_handler.setFormatter(formatter)
        logger.addHandler(console_handler)
    
    # File handler
    if log_file:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
        log_path = Path(log_file)
        log_path.parent.mkdir(parents=True, exist_ok=True)
        
        file_handler = logging.FileHandler(log_file, encoding='utf-8')
        file_formatter = logging.Formatter(
            "%(asctime)s - %(name)s - %(levelname)s - %(funcName)s:%(lineno)d - %(message)s"
        )
        file_handler.setFormatter(file_formatter)
        logger.addHandler(file_handler)
    
    return logger


def get_logger(name: str = None) -> logging.Logger:
    """
    –û—Ç—Ä–∏–º–∞–Ω–Ω—è logger –¥–ª—è –º–æ–¥—É–ª—è
    
    Args:
        name: –Ü–º'—è –º–æ–¥—É–ª—è (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è __name__)
    
    Returns:
        Logger –¥–ª—è –º–æ–¥—É–ª—è
    """
    if name is None:
        name = 'propellerads'
    
    return logging.getLogger(f'propellerads.{name}')


# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
default_logger = setup_logging(
    level="INFO",
    console=True,
    format_style="detailed"
)


class APIRequestLogger:
    """–õ–æ–≥–µ—Ä –¥–ª—è API –∑–∞–ø–∏—Ç—ñ–≤"""
    
    def __init__(self, logger_name: str = "api_requests"):
        self.logger = get_logger(logger_name)
    
    def log_request(self, method: str, endpoint: str, params: dict = None, **kwargs):
        """–õ–æ–≥—É–≤–∞–Ω–Ω—è API –∑–∞–ø–∏—Ç—É"""
        params_str = f" params={params}" if params else ""
        self.logger.info(f"üîÑ {method} {endpoint}{params_str}")
    
    def log_response(self, method: str, endpoint: str, status_code: int, 
                    response_time: float = None, **kwargs):
        """–õ–æ–≥—É–≤–∞–Ω–Ω—è API –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ"""
        time_str = f" ({response_time:.3f}s)" if response_time else ""
        
        if status_code < 300:
            self.logger.info(f"‚úÖ {method} {endpoint} -> {status_code}{time_str}")
        elif status_code < 500:
            self.logger.warning(f"‚ö†Ô∏è {method} {endpoint} -> {status_code}{time_str}")
        else:
            self.logger.error(f"‚ùå {method} {endpoint} -> {status_code}{time_str}")
    
    def log_error(self, method: str, endpoint: str, error: Exception, **kwargs):
        """–õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏ API"""
        self.logger.error(f"üí• {method} {endpoint} -> {type(error).__name__}: {error}")
    
    def log_retry(self, method: str, endpoint: str, attempt: int, max_attempts: int):
        """–õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó —Å–ø—Ä–æ–±–∏"""
        self.logger.warning(f"üîÑ Retry {attempt}/{max_attempts}: {method} {endpoint}")


# –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
if __name__ == "__main__":
    # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
    logger = setup_logging(level="DEBUG")
    api_logger = APIRequestLogger()
    
    logger.debug("–¢–µ—Å—Ç–æ–≤–µ debug –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
    logger.info("–¢–µ—Å—Ç–æ–≤–µ info –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
    logger.warning("–¢–µ—Å—Ç–æ–≤–µ warning –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
    logger.error("–¢–µ—Å—Ç–æ–≤–µ error –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
    
    # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è API –ª–æ–≥–µ—Ä–∞
    api_logger.log_request("GET", "/adv/balance")
    api_logger.log_response("GET", "/adv/balance", 200, 0.345)
    api_logger.log_error("POST", "/adv/campaigns", Exception("Test error"))
    api_logger.log_retry("GET", "/adv/campaigns", 2, 3)
