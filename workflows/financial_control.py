#!/usr/bin/env python3
"""
PropellerAds Financial Control Workflow
–§—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å —Ç–∞ –∞–ª–µ—Ä—Ç–∏
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'src'))

from propellerads_client import PropellerAdsUltimateClient
from datetime import datetime, timedelta
import json

class FinancialController:
    """–ö–ª–∞—Å –¥–ª—è —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—é PropellerAds –∞–∫–∞—É–Ω—Ç–∞"""
    
    def __init__(self, api_key: str = None):
        self.client = PropellerAdsUltimateClient(api_key)
        self.alerts = []
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª—ñ–º—ñ—Ç—ñ–≤ (–º–æ–∂–Ω–∞ –≤–∏–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Ñ—ñ–≥)
        self.balance_limits = {
            "critical": 50.0,    # –ö—Ä–∏—Ç–∏—á–Ω–∏–π —Ä—ñ–≤–µ–Ω—å
            "low": 100.0,        # –ù–∏–∑—å–∫–∏–π —Ä—ñ–≤–µ–Ω—å  
            "medium": 500.0,     # –°–µ—Ä–µ–¥–Ω—ñ–π —Ä—ñ–≤–µ–Ω—å
            "optimal": 1000.0    # –û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π —Ä—ñ–≤–µ–Ω—å
        }
    
    def run_financial_control(self) -> dict:
        """–ó–∞–ø—É—Å–∫ –ø–æ–≤–Ω–æ–≥–æ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—é"""
        print("üí∞ –ó–ê–ü–£–°–ö –§–Ü–ù–ê–ù–°–û–í–û–ì–û –ö–û–ù–¢–†–û–õ–Æ")
        print("=" * 40)
        
        control_results = {
            "timestamp": datetime.now().isoformat(),
            "current_balance": None,
            "balance_status": None,
            "spending_analysis": None,
            "campaigns_cost_analysis": [],
            "alerts": [],
            "recommendations": [],
            "actions_taken": []
        }
        
        # 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å—É
        print("1Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å—É...")
        balance_info = self.check_current_balance()
        control_results.update(balance_info)
        
        # 2. –ê–Ω–∞–ª—ñ–∑ –≤–∏—Ç—Ä–∞—Ç –ø–æ –∫–∞–º–ø–∞–Ω—ñ—è—Ö
        print("2Ô∏è‚É£ –ê–Ω–∞–ª—ñ–∑ –≤–∏—Ç—Ä–∞—Ç –ø–æ –∫–∞–º–ø–∞–Ω—ñ—è—Ö...")
        campaigns_analysis = self.analyze_campaigns_costs()
        control_results["campaigns_cost_analysis"] = campaigns_analysis
        
        # 3. –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∞–ª–µ—Ä—Ç—ñ–≤ —Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π
        print("3Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∞–ª–µ—Ä—Ç—ñ–≤ —Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π...")
        alerts_and_recs = self.generate_financial_alerts_and_recommendations(control_results)
        control_results["alerts"] = alerts_and_recs["alerts"]
        control_results["recommendations"] = alerts_and_recs["recommendations"]
        
        # 4. –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ –¥—ñ—ó (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
        print("4Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏—Ö –¥—ñ–π...")
        actions = self.execute_automatic_actions(control_results)
        control_results["actions_taken"] = actions
        
        # 5. –í–∏–≤—ñ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        self.print_financial_summary(control_results)
        
        return control_results
    
    def check_current_balance(self) -> dict:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å—É"""
        balance_result = self.client.get_balance()
        
        if not balance_result["success"]:
            return {
                "current_balance": None,
                "balance_status": "ERROR",
                "error": balance_result.get("error", "Unknown error")
            }
        
        current_balance = float(balance_result["data"])
        balance_status = self.determine_balance_status(current_balance)
        
        print(f"   üí∞ –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: ${current_balance}")
        print(f"   üìä –°—Ç–∞—Ç—É—Å –±–∞–ª–∞–Ω—Å—É: {balance_status}")
        
        return {
            "current_balance": current_balance,
            "balance_status": balance_status
        }
    
    def determine_balance_status(self, balance: float) -> str:
        """–í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –±–∞–ª–∞–Ω—Å—É"""
        if balance < self.balance_limits["critical"]:
            return "CRITICAL"
        elif balance < self.balance_limits["low"]:
            return "LOW"
        elif balance < self.balance_limits["medium"]:
            return "MEDIUM"
        elif balance < self.balance_limits["optimal"]:
            return "GOOD"
        else:
            return "EXCELLENT"
    
    def analyze_campaigns_costs(self) -> list:
        """–ê–Ω–∞–ª—ñ–∑ –≤–∏—Ç—Ä–∞—Ç –ø–æ –∫–∞–º–ø–∞–Ω—ñ—è—Ö"""
        campaigns_analysis = []
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∫–∞–º–ø–∞–Ω—ñ–π
        campaigns_result = self.client.get_campaigns(page_size=100)
        
        if not campaigns_result["success"]:
            print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∞–º–ø–∞–Ω—ñ–π: {campaigns_result.get('error')}")
            return campaigns_analysis
        
        campaigns = campaigns_result["data"]["result"]
        print(f"   üìä –ê–Ω–∞–ª—ñ–∑ {len(campaigns)} –∫–∞–º–ø–∞–Ω—ñ–π...")
        
        for campaign in campaigns:
            campaign_id = campaign["id"]
            campaign_name = campaign["name"]
            
            analysis = {
                "id": campaign_id,
                "name": campaign_name,
                "status": campaign["status"],
                "rate_model": campaign.get("rate_model", "unknown"),
                "rates_configured": False,
                "estimated_daily_spend": 0.0,
                "risk_level": "LOW",
                "issues": []
            }
            
            # –ê–Ω–∞–ª—ñ–∑ —Å—Ç–∞–≤–æ–∫ –∫–∞–º–ø–∞–Ω—ñ—ó
            rates_result = self.client.get_campaign_rates(campaign_id)
            if rates_result["success"] and rates_result["data"]:
                analysis["rates_configured"] = True
                
                # –ü—Ä–æ—Å—Ç–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏—Ö –≤–∏—Ç—Ä–∞—Ç
                rates = rates_result["data"]
                if isinstance(rates, list) and rates:
                    # –ë–µ—Ä–µ–º–æ —Å–µ—Ä–µ–¥–Ω—é —Å—Ç–∞–≤–∫—É
                    total_amount = sum(float(rate.get("amount", 0)) for rate in rates)
                    avg_rate = total_amount / len(rates)
                    
                    # –û—Ü—ñ–Ω—é—î–º–æ –¥–µ–Ω–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏ (–ø—Ä–∏–±–ª–∏–∑–Ω–æ)
                    # –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ 1000 –ø–æ–∫–∞–∑—ñ–≤ –Ω–∞ –¥–µ–Ω—å –ø—Ä–∏ CPM –∞–±–æ 100 –∫–ª—ñ–∫—ñ–≤ –ø—Ä–∏ CPC
                    if campaign.get("rate_model") == "cpm":
                        estimated_daily = (avg_rate * 1000) / 1000  # CPM
                    else:
                        estimated_daily = avg_rate * 100  # CPC/CPA
                    
                    analysis["estimated_daily_spend"] = round(estimated_daily, 2)
                    
                    # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ä—ñ–≤–Ω—è —Ä–∏–∑–∏–∫—É
                    if estimated_daily > 100:
                        analysis["risk_level"] = "HIGH"
                        analysis["issues"].append("–í–∏—Å–æ–∫—ñ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω—ñ –¥–µ–Ω–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏")
                    elif estimated_daily > 50:
                        analysis["risk_level"] = "MEDIUM"
                        analysis["issues"].append("–°–µ—Ä–µ–¥–Ω—ñ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω—ñ –¥–µ–Ω–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏")
            else:
                analysis["issues"].append("–°—Ç–∞–≤–∫–∏ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –∫–∞–º–ø–∞–Ω—ñ—ó
            if analysis["status"] == 1 and not analysis["rates_configured"]:
                analysis["issues"].append("–ê–∫—Ç–∏–≤–Ω–∞ –∫–∞–º–ø–∞–Ω—ñ—è –±–µ–∑ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏—Ö —Å—Ç–∞–≤–æ–∫")
                analysis["risk_level"] = "HIGH"
            
            campaigns_analysis.append(analysis)
        
        return campaigns_analysis
    
    def generate_financial_alerts_and_recommendations(self, results: dict) -> dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏—Ö –∞–ª–µ—Ä—Ç—ñ–≤ —Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π"""
        alerts = []
        recommendations = []
        
        current_balance = results.get("current_balance", 0)
        balance_status = results.get("balance_status", "UNKNOWN")
        campaigns_analysis = results.get("campaigns_cost_analysis", [])
        
        # –ê–ª–µ—Ä—Ç–∏ –ø–æ –±–∞–ª–∞–Ω—Å—É
        if balance_status == "CRITICAL":
            alerts.append({
                "type": "BALANCE_CRITICAL",
                "severity": "CRITICAL",
                "message": f"–ö—Ä–∏—Ç–∏—á–Ω–æ –Ω–∏–∑—å–∫–∏–π –±–∞–ª–∞–Ω—Å: ${current_balance}. –ö–∞–º–ø–∞–Ω—ñ—ó –º–æ–∂—É—Ç—å –∑—É–ø–∏–Ω–∏—Ç–∏—Å—è!",
                "timestamp": datetime.now().isoformat()
            })
            recommendations.append({
                "type": "FINANCIAL",
                "priority": "CRITICAL",
                "message": "–ù–ï–ì–ê–ô–ù–û –ø–æ–ø–æ–≤–Ω—ñ—Ç—å –±–∞–ª–∞–Ω—Å –º—ñ–Ω—ñ–º—É–º –Ω–∞ $100"
            })
        elif balance_status == "LOW":
            alerts.append({
                "type": "BALANCE_LOW",
                "severity": "HIGH",
                "message": f"–ù–∏–∑—å–∫–∏–π –±–∞–ª–∞–Ω—Å: ${current_balance}. –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è",
                "timestamp": datetime.now().isoformat()
            })
            recommendations.append({
                "type": "FINANCIAL",
                "priority": "HIGH",
                "message": "–ü–æ–ø–æ–≤–Ω—ñ—Ç—å –±–∞–ª–∞–Ω—Å –¥–æ $500 –¥–ª—è —Å—Ç–∞–±—ñ–ª—å–Ω–æ—ó —Ä–æ–±–æ—Ç–∏"
            })
        elif balance_status == "MEDIUM":
            recommendations.append({
                "type": "FINANCIAL",
                "priority": "MEDIUM",
                "message": "–†–æ–∑–≥–ª—è–Ω—å—Ç–µ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –¥–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è ($1000+)"
            })
        
        # –ê–Ω–∞–ª—ñ–∑ —Ä–∏–∑–∏–∫—ñ–≤ –ø–æ –∫–∞–º–ø–∞–Ω—ñ—è—Ö
        high_risk_campaigns = [c for c in campaigns_analysis if c["risk_level"] == "HIGH"]
        medium_risk_campaigns = [c for c in campaigns_analysis if c["risk_level"] == "MEDIUM"]
        
        if high_risk_campaigns:
            alerts.append({
                "type": "HIGH_SPEND_RISK",
                "severity": "HIGH",
                "message": f"{len(high_risk_campaigns)} –∫–∞–º–ø–∞–Ω—ñ–π –∑ –≤–∏—Å–æ–∫–∏–º–∏ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏–º–∏ –≤–∏—Ç—Ä–∞—Ç–∞–º–∏",
                "timestamp": datetime.now().isoformat()
            })
            recommendations.append({
                "type": "CAMPAIGNS",
                "priority": "HIGH",
                "message": f"–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è {len(high_risk_campaigns)} –∫–∞–º–ø–∞–Ω—ñ–π –∑ –≤–∏—Å–æ–∫–∏–º–∏ –≤–∏—Ç—Ä–∞—Ç–∞–º–∏"
            })
        
        if medium_risk_campaigns:
            recommendations.append({
                "type": "CAMPAIGNS",
                "priority": "MEDIUM",
                "message": f"–ú–æ–Ω—ñ—Ç–æ—Ä–∏—Ç–∏ {len(medium_risk_campaigns)} –∫–∞–º–ø–∞–Ω—ñ–π –∑ —Å–µ—Ä–µ–¥–Ω—ñ–º–∏ –≤–∏—Ç—Ä–∞—Ç–∞–º–∏"
            })
        
        # –ê–Ω–∞–ª—ñ–∑ –∑–∞–≥–∞–ª—å–Ω–∏—Ö –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏—Ö –≤–∏—Ç—Ä–∞—Ç
        total_estimated_daily = sum(c.get("estimated_daily_spend", 0) for c in campaigns_analysis)
        days_remaining = current_balance / total_estimated_daily if total_estimated_daily > 0 else float('inf')
        
        if days_remaining < 3:
            alerts.append({
                "type": "BUDGET_DEPLETION",
                "severity": "CRITICAL",
                "message": f"–ü—Ä–∏ –ø–æ—Ç–æ—á–Ω–∏—Ö –≤–∏—Ç—Ä–∞—Ç–∞—Ö –±–∞–ª–∞–Ω—Å –≤–∏—Å—Ç–∞—á–∏—Ç—å –Ω–∞ {days_remaining:.1f} –¥–Ω—ñ–≤",
                "timestamp": datetime.now().isoformat()
            })
        elif days_remaining < 7:
            alerts.append({
                "type": "BUDGET_WARNING",
                "severity": "HIGH",
                "message": f"–ü—Ä–∏ –ø–æ—Ç–æ—á–Ω–∏—Ö –≤–∏—Ç—Ä–∞—Ç–∞—Ö –±–∞–ª–∞–Ω—Å –≤–∏—Å—Ç–∞—á–∏—Ç—å –Ω–∞ {days_remaining:.1f} –¥–Ω—ñ–≤",
                "timestamp": datetime.now().isoformat()
            })
        
        return {"alerts": alerts, "recommendations": recommendations}
    
    def execute_automatic_actions(self, results: dict) -> list:
        """–í–∏–∫–æ–Ω–∞–Ω–Ω—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏—Ö –¥—ñ–π (—è–∫—â–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ)"""
        actions_taken = []
        
        # –ü–æ–∫–∏ —â–æ —Ç—ñ–ª—å–∫–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—è, –±–µ–∑ —Ä–µ–∞–ª—å–Ω–∏—Ö –¥—ñ–π
        # –í –º–∞–π–±—É—Ç–Ω—å–æ–º—É –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏:
        # - –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—É –ø–∞—É–∑—É –∫–∞–º–ø–∞–Ω—ñ–π –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–Ω–æ–º—É –±–∞–ª–∞–Ω—Å—ñ
        # - –í—ñ–¥–ø—Ä–∞–≤–∫—É email/SMS –∞–ª–µ—Ä—Ç—ñ–≤
        # - –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é –∑ —Å–∏—Å—Ç–µ–º–∞–º–∏ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É
        
        balance_status = results.get("balance_status")
        
        if balance_status == "CRITICAL":
            actions_taken.append({
                "action": "LOG_CRITICAL_BALANCE",
                "message": "–ó–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ –∫—Ä–∏—Ç–∏—á–Ω–∏–π —Ä—ñ–≤–µ–Ω—å –±–∞–ª–∞–Ω—Å—É",
                "timestamp": datetime.now().isoformat()
            })
            
            # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —Ä–µ–∞–ª—å–Ω—ñ –¥—ñ—ó:
            # self.pause_high_risk_campaigns(results)
            # self.send_critical_alert_notification()
        
        return actions_taken
    
    def print_financial_summary(self, results: dict):
        """–í–∏–≤—ñ–¥ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –ø—ñ–¥—Å—É–º–∫—É"""
        print("\n" + "="*40)
        print("üí∞ –§–Ü–ù–ê–ù–°–û–í–ò–ô –ü–Ü–î–°–£–ú–û–ö")
        print("="*40)
        
        # –ë–∞–ª–∞–Ω—Å
        balance = results.get("current_balance", 0)
        status = results.get("balance_status", "UNKNOWN")
        status_emoji = {
            "EXCELLENT": "üü¢",
            "GOOD": "üü°", 
            "MEDIUM": "üü†",
            "LOW": "üî¥",
            "CRITICAL": "üö®",
            "ERROR": "‚ùå"
        }
        
        print(f"{status_emoji.get(status, '‚ùì')} –ë–∞–ª–∞–Ω—Å: ${balance} ({status})")
        
        # –ê–Ω–∞–ª—ñ–∑ –∫–∞–º–ø–∞–Ω—ñ–π
        campaigns = results.get("campaigns_cost_analysis", [])
        if campaigns:
            total_estimated = sum(c.get("estimated_daily_spend", 0) for c in campaigns)
            high_risk = len([c for c in campaigns if c["risk_level"] == "HIGH"])
            medium_risk = len([c for c in campaigns if c["risk_level"] == "MEDIUM"])
            
            print(f"üìä –ö–∞–º–ø–∞–Ω—ñ—ó: {len(campaigns)} –≤—Å—å–æ–≥–æ")
            print(f"   –û—Ü—ñ–Ω–µ–Ω—ñ –¥–µ–Ω–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏: ${total_estimated:.2f}")
            print(f"   –í–∏—Å–æ–∫–∏–π —Ä–∏–∑–∏–∫: {high_risk} –∫–∞–º–ø–∞–Ω—ñ–π")
            print(f"   –°–µ—Ä–µ–¥–Ω—ñ–π —Ä–∏–∑–∏–∫: {medium_risk} –∫–∞–º–ø–∞–Ω—ñ–π")
            
            if total_estimated > 0:
                days_remaining = balance / total_estimated
                print(f"   –ë–∞–ª–∞–Ω—Å –≤–∏—Å—Ç–∞—á–∏—Ç—å –Ω–∞: {days_remaining:.1f} –¥–Ω—ñ–≤")
        
        # –ê–ª–µ—Ä—Ç–∏
        alerts = results.get("alerts", [])
        if alerts:
            print(f"\nüö® –ê–ª–µ—Ä—Ç–∏ ({len(alerts)}):")
            for alert in alerts:
                severity_emoji = {"CRITICAL": "üö®", "HIGH": "‚ö†Ô∏è", "MEDIUM": "‚ö°"}
                print(f"   {severity_emoji.get(alert['severity'], 'üì¢')} {alert['message']}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
        recommendations = results.get("recommendations", [])
        if recommendations:
            print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó ({len(recommendations)}):")
            for rec in recommendations:
                priority_emoji = {"CRITICAL": "üö®", "HIGH": "‚ö†Ô∏è", "MEDIUM": "üí°"}
                print(f"   {priority_emoji.get(rec['priority'], 'üìù')} {rec['message']}")
        
        print("\n‚úÖ –§—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—é"""
    try:
        controller = FinancialController()
        results = controller.run_financial_control()
        
        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"financial_control_{timestamp}.json"
        
        with open(filename, "w", encoding="utf-8") as f:
            json.dump(results, f, indent=2, ensure_ascii=False)
        
        print(f"\nüìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤: {filename}")
        
        return results
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—é: {e}")
        return None

if __name__ == "__main__":
    main()
