#!/usr/bin/env python3
"""
PropellerAds Campaign Monitoring Workflow
–ü–æ–≤–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∫–∞–º–ø–∞–Ω—ñ–π –∑ –∞–Ω–∞–ª—ñ—Ç–∏–∫–æ—é
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'src'))

from propellerads_client import PropellerAdsUltimateClient
from datetime import datetime, timedelta
import json

class CampaignMonitor:
    """–ö–ª–∞—Å –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –∫–∞–º–ø–∞–Ω—ñ–π PropellerAds"""
    
    def __init__(self, api_key: str = None):
        self.client = PropellerAdsUltimateClient(api_key)
        self.alerts = []
    
    def run_full_monitoring(self) -> dict:
        """–ó–∞–ø—É—Å–∫ –ø–æ–≤–Ω–æ–≥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"""
        print("üöÄ –ó–ê–ü–£–°–ö –ü–û–í–ù–û–ì–û –ú–û–ù–Ü–¢–û–†–ò–ù–ì–£ –ö–ê–ú–ü–ê–ù–Ü–ô")
        print("=" * 50)
        
        monitoring_results = {
            "timestamp": datetime.now().isoformat(),
            "api_health": None,
            "account_balance": None,
            "campaigns_summary": None,
            "campaigns_details": [],
            "alerts": [],
            "recommendations": []
        }
        
        # 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è API
        print("1Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è API...")
        health = self.client.health_check()
        monitoring_results["api_health"] = health
        
        if health["overall_health"] != "healthy":
            self.add_alert("API_HEALTH", "API –Ω–µ –≤ –∑–¥–æ—Ä–æ–≤–æ–º—É —Å—Ç–∞–Ω—ñ", "HIGH")
        
        # 2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å—É
        print("2Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å—É –∞–∫–∞—É–Ω—Ç–∞...")
        balance = self.client.get_balance()
        if balance["success"]:
            current_balance = float(balance["data"])
            monitoring_results["account_balance"] = current_balance
            
            # –ê–ª–µ—Ä—Ç–∏ –ø–æ –±–∞–ª–∞–Ω—Å—É
            if current_balance < 50:
                self.add_alert("LOW_BALANCE", f"–ö—Ä–∏—Ç–∏—á–Ω–æ –Ω–∏–∑—å–∫–∏–π –±–∞–ª–∞–Ω—Å: ${current_balance}", "CRITICAL")
            elif current_balance < 100:
                self.add_alert("LOW_BALANCE", f"–ù–∏–∑—å–∫–∏–π –±–∞–ª–∞–Ω—Å: ${current_balance}", "HIGH")
            elif current_balance < 500:
                self.add_alert("MEDIUM_BALANCE", f"–°–µ—Ä–µ–¥–Ω—ñ–π –±–∞–ª–∞–Ω—Å: ${current_balance}", "MEDIUM")
            
            print(f"   üí∞ –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: ${current_balance}")
        
        # 3. –ê–Ω–∞–ª—ñ–∑ –∫–∞–º–ø–∞–Ω—ñ–π
        print("3Ô∏è‚É£ –ê–Ω–∞–ª—ñ–∑ –∫–∞–º–ø–∞–Ω—ñ–π...")
        campaigns = self.client.get_campaigns(page_size=100)
        
        if campaigns["success"]:
            campaigns_list = campaigns["data"]["result"]
            monitoring_results["campaigns_summary"] = {
                "total_campaigns": len(campaigns_list),
                "active_campaigns": 0,
                "paused_campaigns": 0,
                "campaigns_with_issues": 0
            }
            
            print(f"   üìä –ó–Ω–∞–π–¥–µ–Ω–æ –∫–∞–º–ø–∞–Ω—ñ–π: {len(campaigns_list)}")
            
            # –î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –∫–æ–∂–Ω–æ—ó –∫–∞–º–ø–∞–Ω—ñ—ó
            for campaign in campaigns_list:
                campaign_analysis = self.analyze_campaign(campaign)
                monitoring_results["campaigns_details"].append(campaign_analysis)
                
                # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                if campaign_analysis["status"] == 1:
                    monitoring_results["campaigns_summary"]["active_campaigns"] += 1
                else:
                    monitoring_results["campaigns_summary"]["paused_campaigns"] += 1
                
                if campaign_analysis["issues"]:
                    monitoring_results["campaigns_summary"]["campaigns_with_issues"] += 1
        
        # 4. –î–æ–¥–∞–≤–∞–Ω–Ω—è –∞–ª–µ—Ä—Ç—ñ–≤ –¥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        monitoring_results["alerts"] = self.alerts
        
        # 5. –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π
        monitoring_results["recommendations"] = self.generate_recommendations(monitoring_results)
        
        # 6. –í–∏–≤—ñ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        self.print_monitoring_summary(monitoring_results)
        
        return monitoring_results
    
    def analyze_campaign(self, campaign: dict) -> dict:
        """–î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –æ–∫—Ä–µ–º–æ—ó –∫–∞–º–ø–∞–Ω—ñ—ó"""
        campaign_id = campaign["id"]
        campaign_name = campaign["name"]
        
        print(f"   üîç –ê–Ω–∞–ª—ñ–∑ –∫–∞–º–ø–∞–Ω—ñ—ó: {campaign_name} (ID: {campaign_id})")
        
        analysis = {
            "id": campaign_id,
            "name": campaign_name,
            "status": campaign["status"],
            "direction": campaign.get("direction", "unknown"),
            "rate_model": campaign.get("rate_model", "unknown"),
            "issues": [],
            "recommendations": [],
            "full_info": None
        }
        
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
        try:
            full_info = self.client.get_campaign_full_info(campaign_id)
            if full_info["success"]:
                analysis["full_info"] = full_info["data"]
                
                # –ê–Ω–∞–ª—ñ–∑ —Å—Ç–∞–≤–æ–∫
                rates = full_info["data"].get("rates", [])
                if not rates:
                    analysis["issues"].append("–ù–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ —Å—Ç–∞–≤–∫–∏")
                    analysis["recommendations"].append("–ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —Å—Ç–∞–≤–∫–∏ –¥–ª—è –∫–∞–º–ø–∞–Ω—ñ—ó")
                
                # –ê–Ω–∞–ª—ñ–∑ —Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥—É –∑–æ–Ω
                included_zones = full_info["data"].get("included_zones", [])
                excluded_zones = full_info["data"].get("excluded_zones", [])
                
                if not included_zones and not excluded_zones:
                    analysis["issues"].append("–ù–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π —Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥ –∑–æ–Ω")
                    analysis["recommendations"].append("–ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –≤–∫–ª—é—á–µ–Ω—ñ –∞–±–æ –≤–∏–∫–ª—é—á–µ–Ω—ñ –∑–æ–Ω–∏")
                
                # –ê–Ω–∞–ª—ñ–∑ –ø—ñ–¥–∑–æ–Ω
                included_sub_zones = full_info["data"].get("included_sub_zones", [])
                excluded_sub_zones = full_info["data"].get("excluded_sub_zones", [])
                
                if len(included_sub_zones) > 1000:
                    analysis["issues"].append("–ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –≤–∫–ª—é—á–µ–Ω–∏—Ö –ø—ñ–¥–∑–æ–Ω")
                    analysis["recommendations"].append("–û–ø—Ç–∏–º—ñ–∑—É–≤–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤–∫–ª—é—á–µ–Ω–∏—Ö –ø—ñ–¥–∑–æ–Ω")
                
        except Exception as e:
            analysis["issues"].append(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó: {str(e)}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –∫–∞–º–ø–∞–Ω—ñ—ó
        if analysis["status"] == 0:
            analysis["issues"].append("–ö–∞–º–ø–∞–Ω—ñ—è –Ω–∞ –ø–∞—É–∑—ñ")
            analysis["recommendations"].append("–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—Ä–∏—á–∏–Ω—É –ø–∞—É–∑–∏ —Ç–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ")
        
        return analysis
    
    def add_alert(self, alert_type: str, message: str, severity: str):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è –∞–ª–µ—Ä—Ç—É"""
        alert = {
            "type": alert_type,
            "message": message,
            "severity": severity,
            "timestamp": datetime.now().isoformat()
        }
        self.alerts.append(alert)
        
        # –í–∏–≤—ñ–¥ –∞–ª–µ—Ä—Ç—É
        severity_emoji = {
            "CRITICAL": "üö®",
            "HIGH": "‚ö†Ô∏è",
            "MEDIUM": "‚ö°",
            "LOW": "‚ÑπÔ∏è"
        }
        print(f"   {severity_emoji.get(severity, 'üì¢')} {severity}: {message}")
    
    def generate_recommendations(self, results: dict) -> list:
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∞–Ω–∞–ª—ñ–∑—É"""
        recommendations = []
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –ø–æ –±–∞–ª–∞–Ω—Å—É
        balance = results.get("account_balance", 0)
        if balance < 100:
            recommendations.append({
                "type": "FINANCIAL",
                "priority": "HIGH",
                "message": "–ü–æ–ø–æ–≤–Ω—ñ—Ç—å –±–∞–ª–∞–Ω—Å –∞–∫–∞—É–Ω—Ç–∞ –¥–ª—è –±–µ–∑–ø–µ—Ä–µ—Ä–≤–Ω–æ—ó —Ä–æ–±–æ—Ç–∏ –∫–∞–º–ø–∞–Ω—ñ–π"
            })
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –ø–æ –∫–∞–º–ø–∞–Ω—ñ—è—Ö
        summary = results.get("campaigns_summary", {})
        if summary.get("campaigns_with_issues", 0) > 0:
            recommendations.append({
                "type": "CAMPAIGNS",
                "priority": "MEDIUM",
                "message": f"–í–∏–ø—Ä–∞–≤–∏—Ç–∏ –ø—Ä–æ–±–ª–µ–º–∏ –≤ {summary['campaigns_with_issues']} –∫–∞–º–ø–∞–Ω—ñ—è—Ö"
            })
        
        if summary.get("paused_campaigns", 0) > summary.get("active_campaigns", 0):
            recommendations.append({
                "type": "CAMPAIGNS",
                "priority": "MEDIUM",
                "message": "–ë—ñ–ª—å—à—ñ—Å—Ç—å –∫–∞–º–ø–∞–Ω—ñ–π –Ω–∞ –ø–∞—É–∑—ñ - –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—Ä–∏—á–∏–Ω–∏"
            })
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –ø–æ API
        if results.get("api_health", {}).get("overall_health") != "healthy":
            recommendations.append({
                "type": "TECHNICAL",
                "priority": "HIGH",
                "message": "–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞–Ω PropellerAds API"
            })
        
        return recommendations
    
    def print_monitoring_summary(self, results: dict):
        """–í–∏–≤—ñ–¥ –ø—ñ–¥—Å—É–º–∫—É –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"""
        print("\n" + "="*50)
        print("üìä –ü–Ü–î–°–£–ú–û–ö –ú–û–ù–Ü–¢–û–†–ò–ù–ì–£")
        print("="*50)
        
        # API –∑–¥–æ—Ä–æ–≤'—è
        health = results.get("api_health", {}).get("overall_health", "unknown")
        health_emoji = "‚úÖ" if health == "healthy" else "‚ùå"
        print(f"{health_emoji} API Health: {health}")
        
        # –ë–∞–ª–∞–Ω—Å
        balance = results.get("account_balance", 0)
        print(f"üí∞ –ë–∞–ª–∞–Ω—Å: ${balance}")
        
        # –ö–∞–º–ø–∞–Ω—ñ—ó
        summary = results.get("campaigns_summary", {})
        print(f"üéØ –ö–∞–º–ø–∞–Ω—ñ—ó:")
        print(f"   –í—Å—å–æ–≥–æ: {summary.get('total_campaigns', 0)}")
        print(f"   –ê–∫—Ç–∏–≤–Ω–∏—Ö: {summary.get('active_campaigns', 0)}")
        print(f"   –ù–∞ –ø–∞—É–∑—ñ: {summary.get('paused_campaigns', 0)}")
        print(f"   –ó –ø—Ä–æ–±–ª–µ–º–∞–º–∏: {summary.get('campaigns_with_issues', 0)}")
        
        # –ê–ª–µ—Ä—Ç–∏
        alerts = results.get("alerts", [])
        if alerts:
            print(f"\nüö® –ê–ª–µ—Ä—Ç–∏ ({len(alerts)}):")
            for alert in alerts:
                print(f"   {alert['severity']}: {alert['message']}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
        recommendations = results.get("recommendations", [])
        if recommendations:
            print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó ({len(recommendations)}):")
            for rec in recommendations:
                print(f"   {rec['priority']}: {rec['message']}")
        
        print("\n‚úÖ –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"""
    try:
        monitor = CampaignMonitor()
        results = monitor.run_full_monitoring()
        
        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"monitoring_results_{timestamp}.json"
        
        with open(filename, "w", encoding="utf-8") as f:
            json.dump(results, f, indent=2, ensure_ascii=False)
        
        print(f"\nüìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤: {filename}")
        
        return results
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {e}")
        return None

if __name__ == "__main__":
    main()
