# Makefile –¥–ª—è PropellerAds API Encyclopedia

.PHONY: help install test test-unit test-integration test-all lint format clean docs

# –ó–º—ñ–Ω–Ω—ñ
PYTHON := python3
PIP := pip3
PYTEST := pytest
SRC_DIR := src
TEST_DIR := tests
DOCS_DIR := docs

# –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è –≤–∏–≤–æ–¥—É
RED := \033[31m
GREEN := \033[32m
YELLOW := \033[33m
BLUE := \033[34m
RESET := \033[0m

help: ## –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
	@echo "$(BLUE)PropellerAds API Encyclopedia - –ö–æ–º–∞–Ω–¥–∏$(RESET)"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "$(GREEN)%-20s$(RESET) %s\n", $$1, $$2}'

install: ## –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
	@echo "$(YELLOW)–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π...$(RESET)"
	$(PIP) install -r requirements.txt
	$(PIP) install pytest pytest-asyncio pytest-mock

test: test-unit ## –ó–∞–ø—É—Å—Ç–∏—Ç–∏ unit —Ç–µ—Å—Ç–∏ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º)

test-unit: ## –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ unit —Ç–µ—Å—Ç–∏
	@echo "$(YELLOW)–ó–∞–ø—É—Å–∫ unit —Ç–µ—Å—Ç—ñ–≤...$(RESET)"
	$(PYTEST) $(TEST_DIR) -m "not integration" -v

test-integration: ## –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω—ñ —Ç–µ—Å—Ç–∏ (–ø–æ—Ç—Ä–µ–±—É—é—Ç—å API —Ç–æ–∫–µ–Ω)
	@echo "$(YELLOW)–ó–∞–ø—É—Å–∫ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω–∏—Ö —Ç–µ—Å—Ç—ñ–≤...$(RESET)"
	@if [ -z "$$MainAPI" ]; then \
		echo "$(RED)–ü–æ–º–∏–ª–∫–∞: MainAPI —Ç–æ–∫–µ–Ω –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ$(RESET)"; \
		echo "–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å: export MainAPI='your_token'"; \
		exit 1; \
	fi
	$(PYTEST) $(TEST_DIR) -m "integration" -v

test-all: ## –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –≤—Å—ñ —Ç–µ—Å—Ç–∏
	@echo "$(YELLOW)–ó–∞–ø—É—Å–∫ –≤—Å—ñ—Ö —Ç–µ—Å—Ç—ñ–≤...$(RESET)"
	$(PYTEST) $(TEST_DIR) -v

test-coverage: ## –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Ç–µ—Å—Ç–∏ –∑ –ø–æ–∫—Ä–∏—Ç—Ç—è–º –∫–æ–¥—É
	@echo "$(YELLOW)–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤ –∑ –ø–æ–∫—Ä–∏—Ç—Ç—è–º...$(RESET)"
	$(PYTEST) $(TEST_DIR) --cov=$(SRC_DIR) --cov-report=html --cov-report=term

test-quick: ## –®–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É
	@echo "$(YELLOW)–®–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç –∫–ª—ñ—î–Ω—Ç–∞...$(RESET)"
	$(PYTHON) $(SRC_DIR)/examples/quick_start.py

demo: ## –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –¥–µ–º–æ enhanced –∫–ª—ñ—î–Ω—Ç–∞
	@echo "$(YELLOW)–ó–∞–ø—É—Å–∫ –¥–µ–º–æ enhanced –∫–ª—ñ—î–Ω—Ç–∞...$(RESET)"
	$(PYTHON) $(SRC_DIR)/examples/enhanced_client_demo.py

lint: ## –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∫–æ–¥ –Ω–∞ –ø–æ–º–∏–ª–∫–∏
	@echo "$(YELLOW)–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–¥—É...$(RESET)"
	@if command -v flake8 >/dev/null 2>&1; then \
		flake8 $(SRC_DIR) $(TEST_DIR) --max-line-length=100; \
	else \
		echo "$(RED)flake8 –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å: pip install flake8$(RESET)"; \
	fi

format: ## –§–æ—Ä–º–∞—Ç—É–≤–∞—Ç–∏ –∫–æ–¥
	@echo "$(YELLOW)–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∫–æ–¥—É...$(RESET)"
	@if command -v black >/dev/null 2>&1; then \
		black $(SRC_DIR) $(TEST_DIR) --line-length=100; \
	else \
		echo "$(RED)black –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å: pip install black$(RESET)"; \
	fi

clean: ## –û—á–∏—Å—Ç–∏—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤—ñ —Ñ–∞–π–ª–∏
	@echo "$(YELLOW)–û—á–∏—â–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤...$(RESET)"
	find . -type f -name "*.pyc" -delete
	find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
	find . -type d -name "*.egg-info" -exec rm -rf {} + 2>/dev/null || true
	rm -rf .pytest_cache
	rm -rf htmlcov
	rm -rf .coverage

docs: ## –ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é
	@echo "$(YELLOW)–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó...$(RESET)"
	@echo "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è –≤–∂–µ —Å—Ç–≤–æ—Ä–µ–Ω–∞ –≤ –ø–∞–ø—Ü—ñ $(DOCS_DIR)/"
	@ls -la $(DOCS_DIR)/

health-check: ## –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–¥–æ—Ä–æ–≤'—è API
	@echo "$(YELLOW)–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è API...$(RESET)"
	@$(PYTHON) -c "
import sys; sys.path.append('$(SRC_DIR)')
from propellerads_client import PropellerAdsUltimateClient
client = PropellerAdsUltimateClient()
health = client.health_check()
print('‚úÖ API Health:', health['overall_health'])
print('üí∞ Balance: $$' + health.get('balance', 'N/A'))
"

validate: ## –í–∞–ª—ñ–¥—É–≤–∞—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç—É
	@echo "$(YELLOW)–í–∞–ª—ñ–¥–∞—Ü—ñ—è —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç—É...$(RESET)"
	@echo "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤:"
	@for file in README.md requirements.txt $(SRC_DIR)/propellerads_client.py $(TEST_DIR)/test_client.py; do \
		if [ -f "$$file" ]; then \
			echo "‚úÖ $$file"; \
		else \
			echo "‚ùå $$file"; \
		fi; \
	done

benchmark: ## –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–µ–Ω—á–º–∞—Ä–∫ API
	@echo "$(YELLOW)–ë–µ–Ω—á–º–∞—Ä–∫ API –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ...$(RESET)"
	@$(PYTHON) -c "
import time, sys; sys.path.append('$(SRC_DIR)')
from propellerads_client import PropellerAdsUltimateClient
client = PropellerAdsUltimateClient()
start = time.time()
for i in range(5):
    client.get_balance()
end = time.time()
print(f'‚ö° 5 –∑–∞–ø–∏—Ç—ñ–≤ –∑–∞ {end-start:.2f}s ({5/(end-start):.1f} req/s)')
"

# –ö–æ–º–±—ñ–Ω–æ–≤–∞–Ω—ñ –∫–æ–º–∞–Ω–¥–∏
dev-setup: install ## –ü–æ–≤–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Ä–æ–±–∫–∏
	@echo "$(GREEN)–†–æ–∑—Ä–æ–±–Ω–∏—Ü—å–∫–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ –≥–æ—Ç–æ–≤–µ!$(RESET)"

ci: test lint ## CI pipeline (—Ç–µ—Å—Ç–∏ + –ª—ñ–Ω—Ç–∏–Ω–≥)
	@echo "$(GREEN)CI pipeline –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!$(RESET)"

release-check: test-all lint docs validate ## –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ –¥–æ —Ä–µ–ª—ñ–∑—É
	@echo "$(GREEN)–ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–µ–ª—ñ–∑—É!$(RESET)"
