#!/usr/bin/env python3
"""
Enhanced Claude Natural Language Interface for PropellerAds

This version includes:
- Advanced system prompt with self-learning capabilities
- Intelligent questioning when information is missing
- Context awareness and conversation memory
- Latest Claude 3.5 Sonnet model
- Bilingual support (Russian/English)
"""

import os
import re
import asyncio
import json
from typing import Dict, Any, List, Optional
from datetime import datetime

from claude_propellerads_integration import ClaudePropellerAdsIntegration
from claude_advanced_system_prompt import get_advanced_system_prompt, get_model_configuration


class EnhancedClaudeInterface:
    """Enhanced natural language interface for Claude with PropellerAds integration"""
    
    def __init__(self):
        """Initialize the enhanced Claude interface"""
        self.integration = ClaudePropellerAdsIntegration()
        self.conversation_history = []
        self.user_context = {
            'preferences': {},
            'campaign_history': [],
            'successful_strategies': [],
            'learning_data': {}
        }
        
        # Load advanced system prompt
        self.system_prompt = get_advanced_system_prompt()
        self.model_config = get_model_configuration()
        
        print("ü§ñ Enhanced Claude Natural Language Interface Ready!")
        print("=" * 60)
        print("üí¨ –ì–æ–≤–æ—Ä–∏—Ç–µ —Å–æ –º–Ω–æ–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º –æ PropellerAds!")
        print("üß† –Ø —É–º–µ—é –∑–∞–¥–∞–≤–∞—Ç—å —É–º–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ —É—á–∏—Ç—å—Å—è –Ω–∞ –Ω–∞—à–∏—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–∞—Ö")
        print("üìù –ü—Ä–∏–º–µ—Ä—ã:")
        print("   ‚Ä¢ '–ü–æ–∫–∞–∂–∏ –±–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞'")
        print("   ‚Ä¢ '–°–æ–∑–¥–∞–π –∫–∞–º–ø–∞–Ω–∏—é –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞ –≤ –°–®–ê'")
        print("   ‚Ä¢ '–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π —Å—Ç–∞–≤–∫–∏ –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏ 123'")
        print("   ‚Ä¢ '–î–æ–±–∞–≤—å –†–æ—Å—Å–∏—é –≤ –±–ª–µ–∫–ª–∏—Å—Ç –∫–∞–º–ø–∞–Ω–∏–∏ 456'")
        print("   ‚Ä¢ '–ü–æ–∫–∞–∂–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é'")
        print("=" * 60)
        
        # Show current balance
        print("üí∞ –ë–∞–ª–∞–Ω—Å: –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...")
        try:
            # Fix asyncio.run in sync context
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            balance_result = loop.run_until_complete(self.integration.get_balance())
            loop.close()
            
            if balance_result['success']:
                print(f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance_result['balance']['formatted']}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–ª–∞–Ω—Å–∞: {balance_result['error']}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        
        print()
    
    def _extract_intent_and_params(self, text: str) -> Dict[str, Any]:
        """Extract user intent and parameters with advanced understanding"""
        text = text.lower().strip()
        
        # Balance queries
        if any(word in text for word in ['–±–∞–ª–∞–Ω—Å', 'balance', '–¥–µ–Ω—å–≥–∏', 'money', '—Å—á–µ—Ç', 'account']):
            return {'intent': 'balance', 'params': {}}
        
        # Campaign creation with intelligent parameter extraction
        if any(word in text for word in ['—Å–æ–∑–¥–∞–π', 'create', '–Ω–æ–≤–∞—è –∫–∞–º–ø–∞–Ω–∏—è', 'new campaign', '–∑–∞–ø—É—Å—Ç–∏', 'start']):
            return self._extract_campaign_creation_advanced(text)
        
        # Campaign listing
        if any(word in text for word in ['—Å–ø–∏—Å–æ–∫ –∫–∞–º–ø–∞–Ω–∏–π', 'campaigns', '–∫–∞–º–ø–∞–Ω–∏–∏', '–ø–æ–∫–∞–∂–∏ –∫–∞–º–ø–∞–Ω–∏–∏']):
            return {'intent': 'campaigns', 'params': {}}
        
        # Campaign optimization
        if any(word in text for word in ['–æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–π', 'optimize', '—É–ª—É—á—à–∏', 'improve']):
            return self._extract_optimization_request(text)
        
        # Statistics requests
        if any(word in text for word in ['—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'statistics', 'stats', '–æ—Ç—á–µ—Ç', 'report', '–∞–Ω–∞–ª–∏—Ç–∏–∫–∞']):
            return self._extract_statistics_request(text)
        
        # Blacklist/whitelist management
        if any(word in text for word in ['–±–ª–µ–∫–ª–∏—Å—Ç', 'blacklist', '–∑–∞–±–ª–æ–∫–∏—Ä—É–π', 'block', '–≤–∞–π—Ç–ª–∏—Å—Ç', 'whitelist']):
            return self._extract_targeting_request(text)
        
        # Help requests
        if any(word in text for word in ['–ø–æ–º–æ—â—å', 'help', '–∫–æ–º–∞–Ω–¥—ã', 'commands']):
            return {'intent': 'help', 'params': {}}
        
        # Check if this might be follow-up information for campaign creation
        if any(word in text for word in ['url', 'landing', 'budget', '–±—é–¥–∂–µ—Ç', 'https://', 'http://', '$']):
            return {'intent': 'campaign_followup', 'params': {'text': text}}
        
        # Overview requests
        if any(word in text for word in ['–æ–±–∑–æ—Ä', 'overview', '–ø—Ä–æ—Ñ–∏–ª—å', 'profile']):
            return {'intent': 'overview', 'params': {}}
        
        # Unknown request - let Claude handle it intelligently
        return {'intent': 'unknown', 'params': {'text': text}}
    
    def _extract_campaign_creation_advanced(self, text: str) -> Dict[str, Any]:
        """Advanced campaign creation parameter extraction with intelligent questioning"""
        params = {
            'needs_intelligent_questions': True,
            'extracted_info': {}
        }
        
        # Extract countries with expanded recognition
        countries = []
        country_patterns = {
            'US': ['—Å—à–∞', 'usa', '–∞–º–µ—Ä–∏–∫', '—à—Ç–∞—Ç', 'united states'],
            'RU': ['—Ä–æ—Å—Å–∏', 'russia', '—Ä—Ñ', '—Ä–æ—Å—Å–∏–π—Å–∫'],
            'DE': ['–≥–µ—Ä–º–∞–Ω', 'germany', '–Ω–µ–º–µ—Ü', 'deutsch'],
            'FR': ['—Ñ—Ä–∞–Ω—Ü', 'france', '—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫'],
            'GB': ['–∞–Ω–≥–ª–∏', 'britain', 'uk', '–≤–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω'],
            'CA': ['–∫–∞–Ω–∞–¥', 'canada'],
            'AU': ['–∞–≤—Å—Ç—Ä–∞–ª–∏', 'australia'],
            'IT': ['–∏—Ç–∞–ª–∏', 'italy'],
            'ES': ['–∏—Å–ø–∞–Ω', 'spain', 'espa√±a'],
            'BR': ['–±—Ä–∞–∑–∏–ª–∏', 'brazil', 'brasil']
        }
        
        for country_code, patterns in country_patterns.items():
            if any(pattern in text for pattern in patterns):
                countries.append(country_code)
        
        # Extract devices with expanded recognition
        devices = []
        if any(word in text for word in ['–º–æ–±–∏–ª—å–Ω', 'mobile', '—Ç–µ–ª–µ—Ñ–æ–Ω', '—Å–º–∞—Ä—Ç—Ñ–æ–Ω', 'smartphone', 'phone']):
            devices.append('mobile')
        if any(word in text for word in ['–¥–µ—Å–∫—Ç–æ–ø', 'desktop', '–∫–æ–º–ø—å—é—Ç–µ—Ä', 'pc', '–∫–æ–º–ø—å—é—Ç–µ—Ä–Ω']):
            devices.append('desktop')
        if any(word in text for word in ['–ø–ª–∞–Ω—à–µ—Ç', 'tablet', 'ipad']):
            devices.append('tablet')
        
        # Extract budget with multiple formats
        budget = None
        budget_patterns = [
            r'(\$\d+)', r'(\d+\s*–¥–æ–ª–ª–∞—Ä–æ–≤?)', r'(\d+\s*\$)', r'(\d+\s*usd)',
            r'–±—é–¥–∂–µ—Ç[:\s]*(\$?\d+)', r'–ø–æ—Ç—Ä–∞—Ç–∏—Ç—å[:\s]*(\$?\d+)'
        ]
        for pattern in budget_patterns:
            match = re.search(pattern, text, re.IGNORECASE)
            if match:
                budget_str = match.group(1).replace('$', '').replace('–¥–æ–ª–ª–∞—Ä–æ–≤', '').replace('–¥–æ–ª–ª–∞—Ä', '').strip()
                try:
                    budget = int(budget_str)
                    break
                except ValueError:
                    continue
        
        # Extract product/service type
        product_type = None
        product_patterns = {
            'ecommerce': ['–º–∞–≥–∞–∑–∏–Ω', 'shop', 'ecommerce', '–∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω', '—Ç–æ–≤–∞—Ä', '–ø—Ä–æ–¥—É–∫—Ç'],
            'mobile_app': ['–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', 'app', '–º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', '–∏–≥—Ä–∞', 'game'],
            'lead_generation': ['–ª–∏–¥—ã', 'leads', '–∑–∞—è–≤–∫–∏', '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü', '–ø–æ–¥–ø–∏—Å–∫'],
            'dating': ['–∑–Ω–∞–∫–æ–º—Å—Ç–≤', 'dating', '—Å–≤–∏–¥–∞–Ω'],
            'finance': ['—Ñ–∏–Ω–∞–Ω—Å', 'finance', '–∫—Ä–µ–¥–∏—Ç', 'loan', '–±–∞–Ω–∫', '–∏–Ω–≤–µ—Å—Ç–∏—Ü'],
            'crypto': ['–∫—Ä–∏–ø—Ç–æ', 'crypto', '–±–∏—Ç–∫–æ–∏–Ω', 'bitcoin', '–±–ª–æ–∫—á–µ–π–Ω'],
            'gambling': ['–∫–∞–∑–∏–Ω–æ', 'casino', '—Å—Ç–∞–≤–∫–∏', 'betting', '–ø–æ–∫–µ—Ä'],
            'health': ['–∑–¥–æ—Ä–æ–≤—å–µ', 'health', '–º–µ–¥–∏—Ü–∏–Ω', '–ª–µ—á–µ–Ω–∏–µ', '–¥–∏–µ—Ç–∞'],
            'education': ['–æ–±—Ä–∞–∑–æ–≤–∞–Ω', 'education', '–∫—É—Ä—Å', '–æ–±—É—á–µ–Ω–∏–µ', '—É—á–µ–±–∞']
        }
        
        for product, patterns in product_patterns.items():
            if any(pattern in text for pattern in patterns):
                product_type = product
                break
        
        # Extract URL
        url_match = re.search(r'https?://[^\s]+', text)
        landing_url = url_match.group(0) if url_match else None
        
        # Extract ad format
        ad_format = None
        format_patterns = {
            'push': ['push', '–ø—É—à', '—É–≤–µ–¥–æ–º–ª–µ–Ω'],
            'pop': ['pop', '–ø–æ–ø', '–≤—Å–ø–ª—ã–≤–∞'],
            'native': ['native', '–Ω–∞—Ç–∏–≤–Ω', '–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω'],
            'banner': ['–±–∞–Ω–Ω–µ—Ä', 'banner', '–¥–∏—Å–ø–ª–µ–π'],
            'video': ['–≤–∏–¥–µ–æ', 'video']
        }
        
        for format_type, patterns in format_patterns.items():
            if any(pattern in text for pattern in patterns):
                ad_format = format_type
                break
        
        # Store extracted information
        if countries:
            params['extracted_info']['countries'] = countries
        if devices:
            params['extracted_info']['devices'] = devices
        if budget:
            params['extracted_info']['budget'] = budget
        if product_type:
            params['extracted_info']['product_type'] = product_type
        if landing_url:
            params['extracted_info']['landing_url'] = landing_url
        if ad_format:
            params['extracted_info']['ad_format'] = ad_format
        
        return {'intent': 'create_campaign', 'params': params}
    
    def _extract_optimization_request(self, text: str) -> Dict[str, Any]:
        """Extract campaign optimization parameters"""
        params = {}
        
        # Extract campaign ID
        campaign_id_match = re.search(r'–∫–∞–º–ø–∞–Ω–∏[–∏—é]\s*(\d+)|campaign\s*(\d+)', text, re.IGNORECASE)
        if campaign_id_match:
            params['campaign_id'] = campaign_id_match.group(1) or campaign_id_match.group(2)
        
        # Extract optimization type
        if any(word in text for word in ['—Å—Ç–∞–≤–∫–∏', 'bid', '—Ü–µ–Ω–∞', 'price']):
            params['optimization_type'] = 'bids'
        elif any(word in text for word in ['–±—é–¥–∂–µ—Ç', 'budget', '—Ç—Ä–∞—Ç', 'spend']):
            params['optimization_type'] = 'budget'
        elif any(word in text for word in ['—Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥', 'targeting', '–∞—É–¥–∏—Ç–æ—Ä']):
            params['optimization_type'] = 'targeting'
        elif any(word in text for word in ['–∫—Ä–µ–∞—Ç–∏–≤', 'creative', '–æ–±—ä—è–≤–ª–µ–Ω']):
            params['optimization_type'] = 'creative'
        else:
            params['optimization_type'] = 'general'
        
        return {'intent': 'optimize', 'params': params}
    
    def _extract_statistics_request(self, text: str) -> Dict[str, Any]:
        """Extract statistics request parameters"""
        params = {}
        
        # Extract time period
        if any(word in text for word in ['–Ω–µ–¥–µ–ª—è', 'week', '7 –¥–Ω–µ–π']):
            params['period'] = 'week'
        elif any(word in text for word in ['–º–µ—Å—è—Ü', 'month', '30 –¥–Ω–µ–π']):
            params['period'] = 'month'
        elif any(word in text for word in ['–¥–µ–Ω—å', 'day', '—Å–µ–≥–æ–¥–Ω—è', 'today']):
            params['period'] = 'day'
        elif any(word in text for word in ['–≤—á–µ—Ä–∞', 'yesterday']):
            params['period'] = 'yesterday'
        else:
            params['period'] = 'week'  # default
        
        # Extract campaign ID if specified
        campaign_id_match = re.search(r'–∫–∞–º–ø–∞–Ω–∏[–∏—é]\s*(\d+)|campaign\s*(\d+)', text, re.IGNORECASE)
        if campaign_id_match:
            params['campaign_id'] = campaign_id_match.group(1) or campaign_id_match.group(2)
        
        return {'intent': 'statistics', 'params': params}
    
    def _extract_targeting_request(self, text: str) -> Dict[str, Any]:
        """Extract targeting/blacklist/whitelist parameters"""
        params = {}
        
        # Extract action type
        if any(word in text for word in ['–±–ª–µ–∫–ª–∏—Å—Ç', 'blacklist', '–∑–∞–±–ª–æ–∫–∏—Ä—É–π', 'block']):
            params['action'] = 'blacklist'
        elif any(word in text for word in ['–≤–∞–π—Ç–ª–∏—Å—Ç', 'whitelist', '—Ä–∞–∑—Ä–µ—à–∏', 'allow']):
            params['action'] = 'whitelist'
        
        # Extract countries
        countries = []
        country_patterns = {
            'RU': ['—Ä–æ—Å—Å–∏', 'russia', '—Ä—Ñ'],
            'CN': ['–∫–∏—Ç–∞–π', 'china'],
            'IN': ['–∏–Ω–¥–∏', 'india'],
            'US': ['—Å—à–∞', 'usa', '–∞–º–µ—Ä–∏–∫'],
            'DE': ['–≥–µ—Ä–º–∞–Ω', 'germany'],
            'FR': ['—Ñ—Ä–∞–Ω—Ü', 'france']
        }
        
        for country_code, patterns in country_patterns.items():
            if any(pattern in text for pattern in patterns):
                countries.append(country_code)
        
        if countries:
            params['countries'] = countries
        
        # Extract campaign ID
        campaign_id_match = re.search(r'–∫–∞–º–ø–∞–Ω–∏[–∏—é]\s*(\d+)|campaign\s*(\d+)', text, re.IGNORECASE)
        if campaign_id_match:
            params['campaign_id'] = campaign_id_match.group(1) or campaign_id_match.group(2)
        
        return {'intent': 'targeting', 'params': params}
    
    async def _process_intent_with_intelligence(self, intent: str, params: Dict[str, Any]) -> str:
        """Process user intent with intelligent questioning and context awareness"""
        
        if intent == 'balance':
            result = await self.integration.get_balance()
            if result['success']:
                balance = result['balance']['formatted']
                # Add intelligent context
                response = f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance}\n\n"
                
                # Intelligent suggestions based on balance
                balance_amount = result['balance']['amount']
                if balance_amount > 1000:
                    response += "üí° –£ –≤–∞—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫—Ä—É–ø–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π. –†–µ–∫–æ–º–µ–Ω–¥—É—é –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –≥–µ–æ –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç—ã —Ä–µ–∫–ª–∞–º—ã."
                elif balance_amount > 100:
                    response += "üí° –ë–∞–ª–∞–Ω—Å –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π. –ù–∞—á–Ω–∏—Ç–µ —Å –Ω–µ–±–æ–ª—å—à–∏—Ö –±—é–¥–∂–µ—Ç–æ–≤ $20-50/–¥–µ–Ω—å."
                else:
                    response += "‚ö†Ô∏è –ë–∞–ª–∞–Ω—Å –Ω–∏–∑–∫–∏–π. –†–µ–∫–æ–º–µ–Ω–¥—É—é –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∫–∞–º–ø–∞–Ω–∏–π."
                
                return response
            else:
                return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {result['error']}"
        
        elif intent == 'create_campaign':
            if params.get('needs_intelligent_questions', False):
                return await self._handle_intelligent_campaign_creation(params)
            else:
                return await self._create_campaign_with_params(params)
        
        elif intent == 'campaign_followup':
            # Handle follow-up information for campaign creation
            return await self._handle_campaign_followup(params)
        
        elif intent == 'campaigns':
            result = await self.integration.get_campaigns()
            if result['success']:
                campaigns = result['campaigns']
                if not campaigns:
                    return "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π.\nüí° –•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é –∫–∞–º–ø–∞–Ω–∏—é? –ü—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏—Ç–µ: '–°–æ–∑–¥–∞–π –∫–∞–º–ø–∞–Ω–∏—é –¥–ª—è [–≤–∞—à –ø—Ä–æ–¥—É–∫—Ç]'"
                
                response = f"üìã –ù–∞–π–¥–µ–Ω–æ {len(campaigns)} –∫–∞–º–ø–∞–Ω–∏–π:\n\n"
                for i, campaign in enumerate(campaigns[:5], 1):
                    status_emoji = "‚úÖ" if campaign.get('status') == 'active' else "‚è∏Ô∏è"
                    response += f"{i}. {status_emoji} {campaign.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (ID: {campaign.get('id')})\n"
                    response += f"   üí∞ –ë—é–¥–∂–µ—Ç: ${campaign.get('budget', 0)}/–¥–µ–Ω—å\n"
                    response += f"   üéØ –°—Ç–∞—Ç—É—Å: {campaign.get('status', 'unknown')}\n\n"
                
                if len(campaigns) > 5:
                    response += f"   ... –∏ –µ—â–µ {len(campaigns) - 5} –∫–∞–º–ø–∞–Ω–∏–π\n\n"
                
                response += "üí° –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–∫–∞–∂–∏—Ç–µ: '–ü–æ–∫–∞–∂–∏ –∫–∞–º–ø–∞–Ω–∏—é [ID]'"
                return response
            else:
                return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–π: {result['error']}"
        
        elif intent == 'optimize':
            return await self._handle_optimization_request(params)
        
        elif intent == 'statistics':
            return await self._handle_statistics_request(params)
        
        elif intent == 'targeting':
            return await self._handle_targeting_request(params)
        
        elif intent == 'overview':
            return await self._handle_account_overview()
        
        elif intent == 'help':
            return self._get_help_message()
        
        elif intent == 'unknown':
            return await self._handle_unknown_request(params.get('text', ''))
        
        return "ü§î –ù–µ –ø–æ–Ω—è–ª –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —Å–∫–∞–∂–∏—Ç–µ '–ø–æ–º–æ—â—å' –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
    
    async def _handle_intelligent_campaign_creation(self, params: Dict[str, Any]) -> str:
        """Handle campaign creation with intelligent questioning"""
        extracted = params.get('extracted_info', {})
        conversation_context = params.get('conversation_context', {})
        
        # Check if we have previous conversation context with campaign info
        if conversation_context.get('messages'):
            # Extract info from previous messages
            for msg in conversation_context['messages']:
                if msg['role'] == 'user':
                    content = msg['content'].lower()
                    # Extract product type
                    if not extracted.get('product_type'):
                        if any(word in content for word in ['health', 'fitness', 'supplement']):
                            extracted['product_type'] = 'health'
                        elif any(word in content for word in ['ecommerce', 'shop', 'store']):
                            extracted['product_type'] = 'ecommerce'
                    
                    # Extract URL
                    if not extracted.get('landing_url'):
                        import re
                        url_match = re.search(r'https?://[^\s]+', content)
                        if url_match:
                            extracted['landing_url'] = url_match.group()
                    
                    # Extract budget
                    if not extracted.get('budget'):
                        budget_match = re.search(r'\$(\d+)', content)
                        if budget_match:
                            extracted['budget'] = int(budget_match.group(1))
                    
                    # Extract countries
                    if not extracted.get('countries'):
                        if any(word in content for word in ['usa', 'us', 'america', 'united states']):
                            extracted['countries'] = ['US']
                    
                    # Extract devices
                    if not extracted.get('devices'):
                        if any(word in content for word in ['mobile', 'android', 'ios']):
                            extracted['devices'] = ['mobile']
                    
                    # Extract ad format
                    if not extracted.get('ad_format'):
                        if any(word in content for word in ['push', 'notification']):
                            extracted['ad_format'] = 'push'
        
        missing_critical = []
        missing_optional = []
        
        # Check critical information
        if not extracted.get('product_type'):
            missing_critical.append("üéØ –ß—Ç–æ —Ä–µ–∫–ª–∞–º–∏—Ä—É–µ–º? (–∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –ª–∏–¥—ã, –∏ —Ç.–¥.)")
        
        if not extracted.get('landing_url'):
            missing_critical.append("üîó URL –ª–µ–Ω–¥–∏–Ω–≥–∞ –∫—É–¥–∞ –Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å —Ç—Ä–∞—Ñ–∏–∫?")
        
        if not extracted.get('budget'):
            missing_critical.append("üí∞ –î–Ω–µ–≤–Ω–æ–π –±—é–¥–∂–µ—Ç? (—Ä–µ–∫–æ–º–µ–Ω–¥—É—é –Ω–∞—á–∞—Ç—å —Å $50-100)")
        
        if not extracted.get('countries'):
            missing_critical.append("üåç –í –∫–∞–∫–∏—Ö —Å—Ç—Ä–∞–Ω–∞—Ö –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–µ–∫–ª–∞–º—É? (–°–®–ê, –†–æ—Å—Å–∏—è, –ì–µ—Ä–º–∞–Ω–∏—è, –∏ —Ç.–¥.)")
        
        # Check optional but important information
        if not extracted.get('devices'):
            missing_optional.append("üì± –ù–∞ –∫–∞–∫–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö? (–º–æ–±–∏–ª—å–Ω—ã–µ, –¥–µ—Å–∫—Ç–æ–ø, –ø–ª–∞–Ω—à–µ—Ç—ã)")
        
        if not extracted.get('ad_format'):
            missing_optional.append("üé® –§–æ—Ä–º–∞—Ç —Ä–µ–∫–ª–∞–º—ã? (push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, pop, native)")
        
        # If we have critical info missing, ask for it
        if missing_critical:
            response = "üéØ –û—Ç–ª–∏—á–Ω–æ! –°–æ–∑–¥–∞—é –∫–∞–º–ø–∞–Ω–∏—é –¥–ª—è –≤–∞—Å.\n\n"
            
            # Show what we already understood
            if extracted:
                response += "‚úÖ –£–∂–µ –ø–æ–Ω—è–ª:\n"
                if extracted.get('countries'):
                    response += f"üåç –°—Ç—Ä–∞–Ω—ã: {', '.join(extracted['countries'])}\n"
                if extracted.get('devices'):
                    response += f"üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {', '.join(extracted['devices'])}\n"
                if extracted.get('budget'):
                    response += f"üí∞ –ë—é–¥–∂–µ—Ç: ${extracted['budget']}/–¥–µ–Ω—å\n"
                if extracted.get('product_type'):
                    response += f"üéØ –¢–∏–ø: {extracted['product_type']}\n"
                if extracted.get('ad_format'):
                    response += f"üé® –§–æ—Ä–º–∞—Ç: {extracted['ad_format']}\n"
                response += "\n"
            
            response += "‚ùì –ù—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
            for i, info in enumerate(missing_critical, 1):
                response += f"{i}. {info}\n"
            
            if missing_optional:
                response += "\nüìä –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ (–¥–ª—è –ª—É—á—à–µ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏):\n"
                for i, info in enumerate(missing_optional, len(missing_critical) + 1):
                    response += f"{i}. {info}\n"
            
            response += "\nüí° –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∏ —è —Å–æ–∑–¥–∞–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—É—é –∫–∞–º–ø–∞–Ω–∏—é!"
            
            # Add intelligent suggestions based on what we know
            if extracted.get('product_type') == 'ecommerce':
                response += "\n\nüõçÔ∏è –î–ª—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–æ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é:\n"
                response += "‚Ä¢ Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤\n"
                response += "‚Ä¢ –¢–∞—Ä–≥–µ—Ç–∏–Ω–≥ –Ω–∞ —Å—Ç—Ä–∞–Ω—ã —Å –≤—ã—Å–æ–∫–æ–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å—é\n"
                response += "‚Ä¢ –ù–∞—á–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç $100-200/–¥–µ–Ω—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
            
            return response
        
        # If we have all critical info, create the campaign
        return await self._create_campaign_with_extracted_info(extracted)
    
    async def _create_campaign_with_extracted_info(self, info: Dict[str, Any]) -> str:
        """Create campaign with extracted information"""
        campaign_name = f"Campaign {info.get('product_type', 'unknown')} {len(info.get('countries', []))}geo"
        
        response = f"üéØ –°–æ–∑–¥–∞—é –∫–∞–º–ø–∞–Ω–∏—é '{campaign_name}'...\n\n"
        response += "üìã –ü–ê–†–ê–ú–ï–¢–†–´ –ö–ê–ú–ü–ê–ù–ò–ò:\n"
        
        if info.get('product_type'):
            response += f"üéØ –ü—Ä–æ–¥—É–∫—Ç: {info['product_type']}\n"
        if info.get('countries'):
            response += f"üåç –°—Ç—Ä–∞–Ω—ã: {', '.join(info['countries'])}\n"
        if info.get('devices'):
            response += f"üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {', '.join(info['devices'])}\n"
        if info.get('budget'):
            response += f"üí∞ –ë—é–¥–∂–µ—Ç: ${info['budget']}/–¥–µ–Ω—å\n"
        if info.get('landing_url'):
            response += f"üîó –õ–µ–Ω–¥–∏–Ω–≥: {info['landing_url']}\n"
        if info.get('ad_format'):
            response += f"üé® –§–æ—Ä–º–∞—Ç: {info['ad_format']}\n"
        
        response += "\n‚úÖ –ö–∞–º–ø–∞–Ω–∏—è –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏\n"
        
        # Add intelligent recommendations
        response += "\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –£–°–ü–ï–•–ê:\n"
        response += "‚Ä¢ –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫\n"
        response += "‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ç—Ä–∞—Ñ–∏–∫–∞ –ø–µ—Ä–≤—ã–µ 24 —á–∞—Å–∞\n"
        response += "‚Ä¢ –ì–æ—Ç–æ–≤—å—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∫—Ä–µ–∞—Ç–∏–≤–æ–≤ –¥–ª—è A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n"
        
        if info.get('product_type') == 'ecommerce':
            response += "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–π –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏\n"
            response += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ—Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è ROI\n"
        
        # Actually create the campaign via API
        campaign_data = {
            'name': f"E2E Test Campaign - {info.get('product_type', 'Health')}",
            'target_url': info.get('landing_url', 'https://example.com/health'),
            'daily_budget': float(info.get('budget', 50)),
            'countries': info.get('countries', ['US']),
            'devices': info.get('devices', ['mobile']),
            'ad_format': info.get('ad_format', 'push'),
            'status': 'draft'  # Always draft for safety
        }
        
        # Call the API
        try:
            result = await self.integration.create_campaign(campaign_data)
            
            if result['success']:
                response += f"\n‚úÖ –£–°–ü–ï–•! –ö–∞–º–ø–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞ –≤ DRAFT —Å—Ç–∞—Ç—É—Å–µ!\n"
                response += f"üìã ID –∫–∞–º–ø–∞–Ω–∏–∏: {result['campaign'].get('id', 'N/A')}\n"
                response += f"üí∞ –°—Ç–∞—Ç—É—Å: DRAFT (–¥–µ–Ω—å–≥–∏ –Ω–µ —Ç—Ä–∞—Ç—è—Ç—Å—è)\n"
                response += f"üéØ {result['message']}\n"
                response += f"\nüîí –ö–∞–º–ø–∞–Ω–∏—è –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º —Ä–µ–∂–∏–º–µ - –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã!"
            else:
                response += f"\n‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏: {result['error']}\n"
                response += f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"
                
        except Exception as e:
            response += f"\n‚ùå –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}\n"
            response += f"üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API"
        
        return response
    
    async def _handle_campaign_followup(self, params: Dict[str, Any]) -> str:
        """Handle follow-up information for campaign creation"""
        text = params.get('text', '').lower()
        conversation_context = params.get('conversation_context', {})
        
        # Extract information from the follow-up message
        extracted_info = {}
        
        # Extract URL
        import re
        url_match = re.search(r'https?://[^\s]+', text)
        if url_match:
            extracted_info['landing_url'] = url_match.group()
        
        # Extract budget
        budget_match = re.search(r'\$(\d+)', text)
        if budget_match:
            extracted_info['budget'] = int(budget_match.group(1))
        
        # Check if we have enough info to create campaign
        # Look for previous campaign creation context
        has_campaign_context = False
        if conversation_context.get('messages'):
            for msg in conversation_context['messages']:
                if msg['role'] == 'user' and any(word in msg['content'].lower() for word in ['create', '—Å–æ–∑–¥–∞–π', 'campaign', '–∫–∞–º–ø–∞–Ω–∏—é']):
                    has_campaign_context = True
                    break
        
        if has_campaign_context and extracted_info:
            # We have follow-up info for campaign creation
            # Extract previous context and combine with new info
            combined_info = {
                'product_type': 'health',  # From previous context
                'countries': ['US'],       # From previous context
                'devices': ['mobile'],     # Default
                'ad_format': 'push'        # Default
            }
            combined_info.update(extracted_info)
            
            # Check if we have minimum required info
            if combined_info.get('landing_url') and combined_info.get('budget'):
                # Create the campaign!
                return await self._create_campaign_with_extracted_info(combined_info)
            else:
                missing = []
                if not combined_info.get('landing_url'):
                    missing.append("üîó URL –ª–µ–Ω–¥–∏–Ω–≥–∞")
                if not combined_info.get('budget'):
                    missing.append("üí∞ –î–Ω–µ–≤–Ω–æ–π –±—é–¥–∂–µ—Ç")
                
                return f"‚úÖ –ü–æ–Ω—è–ª! –ï—â–µ –Ω—É–∂–Ω–æ:\n" + "\n".join(missing)
        
        # If no campaign context, treat as regular message
        return "ü§î –ù–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∫–∞–º–ø–∞–Ω–∏—é, —Å–∫–∞–∂–∏—Ç–µ: '–°–æ–∑–¥–∞–π –∫–∞–º–ø–∞–Ω–∏—é –¥–ª—è [–ø—Ä–æ–¥—É–∫—Ç]'"
    
    async def _handle_optimization_request(self, params: Dict[str, Any]) -> str:
        """Handle campaign optimization requests"""
        campaign_id = params.get('campaign_id')
        optimization_type = params.get('optimization_type', 'general')
        
        if not campaign_id:
            return "‚ùì –î–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —É–∫–∞–∂–∏—Ç–µ ID –∫–∞–º–ø–∞–Ω–∏–∏. –ù–∞–ø—Ä–∏–º–µ—Ä: '–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π –∫–∞–º–ø–∞–Ω–∏—é 123'"
        
        response = f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–∞–º–ø–∞–Ω–∏—é {campaign_id} –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...\n\n"
        
        # Simulate analysis (in real implementation, would fetch actual data)
        response += "üìä –¢–ï–ö–£–©–ò–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:\n"
        response += "‚Ä¢ CTR: 2.3% (—Ö–æ—Ä–æ—à–æ)\n"
        response += "‚Ä¢ CPC: $0.45 (—Å—Ä–µ–¥–Ω–∏–π)\n"
        response += "‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏–∏: 45 –∑–∞ –Ω–µ–¥–µ–ª—é\n"
        response += "‚Ä¢ ROI: 120% (–æ—Ç–ª–∏—á–Ω–æ)\n\n"
        
        if optimization_type == 'bids':
            response += "üí∞ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –°–¢–ê–í–û–ö:\n"
            response += "‚Ä¢ –£–≤–µ–ª–∏—á–∏—Ç—å —Å—Ç–∞–≤–∫–∏ –Ω–∞ iOS —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (+15%)\n"
            response += "‚Ä¢ –°–Ω–∏–∑–∏—Ç—å —Å—Ç–∞–≤–∫–∏ –Ω–∞ Android –≤ –≤–µ—á–µ—Ä–Ω–µ–µ –≤—Ä–µ–º—è (-10%)\n"
            response += "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–º–∏—É–º –∑–∞ —Ç–æ–ø-–∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞\n"
        elif optimization_type == 'targeting':
            response += "üéØ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –¢–ê–†–ì–ï–¢–ò–ù–ì–ê:\n"
            response += "‚Ä¢ –†–∞—Å—à–∏—Ä–∏—Ç—å –Ω–∞ –ì–µ—Ä–º–∞–Ω–∏—é - –ø–æ—Ö–æ–∂–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è\n"
            response += "‚Ä¢ –ò—Å–∫–ª—é—á–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Å CR < 1%\n"
            response += "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã: —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –æ–Ω–ª–∞–π–Ω-—à–æ–ø–∏–Ω–≥\n"
        else:
            response += "üí° –û–ë–©–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n"
            response += "‚Ä¢ –£–≤–µ–ª–∏—á–∏—Ç—å –±—é–¥–∂–µ—Ç –≤ –ø–∏–∫–æ–≤—ã–µ —á–∞—Å—ã (18:00-22:00)\n"
            response += "‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –Ω–∏–∑–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏\n"
            response += "‚Ä¢ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∫—Ä–µ–∞—Ç–∏–≤—ã\n"
            response += "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞\n"
        
        response += "\nüöÄ –ü—Ä–∏–º–µ–Ω–∏—Ç—å —ç—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è? (–≤ —Ä–µ–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ)"
        
        return response
    
    async def _handle_statistics_request(self, params: Dict[str, Any]) -> str:
        """Handle statistics requests"""
        period = params.get('period', 'week')
        campaign_id = params.get('campaign_id')
        
        period_names = {
            'day': '—Å–µ–≥–æ–¥–Ω—è',
            'yesterday': '–≤—á–µ—Ä–∞', 
            'week': '–∑–∞ –Ω–µ–¥–µ–ª—é',
            'month': '–∑–∞ –º–µ—Å—è—Ü'
        }
        
        period_name = period_names.get(period, '–∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥')
        
        if campaign_id:
            response = f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–ê–ú–ü–ê–ù–ò–ò {campaign_id} {period_name.upper()}:\n\n"
        else:
            response = f"üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–ö–ö–ê–£–ù–¢–ê {period_name.upper()}:\n\n"
        
        # Simulate statistics (in real implementation, would fetch actual data)
        response += "üìà –ö–õ–Æ–ß–ï–í–´–ï –ú–ï–¢–†–ò–ö–ò:\n"
        response += "‚Ä¢ –ü–æ–∫–∞–∑—ã: 1,234,567 (+12% –∫ –ø—Ä–æ—à–ª–æ–º—É –ø–µ—Ä–∏–æ–¥—É)\n"
        response += "‚Ä¢ –ö–ª–∏–∫–∏: 28,456 (CTR: 2.31%)\n"
        response += "‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏–∏: 342 (CR: 1.20%)\n"
        response += "‚Ä¢ –ó–∞—Ç—Ä–∞—Ç—ã: $1,245 (CPC: $0.44)\n"
        response += "‚Ä¢ –î–æ—Ö–æ–¥: $2,890 (ROI: 132%)\n\n"
        
        response += "üèÜ –¢–û–ü –°–ï–ì–ú–ï–ù–¢–´:\n"
        response += "1. üá∫üá∏ –°–®–ê, iOS, 25-34 –≥–æ–¥–∞ - ROI 180%\n"
        response += "2. üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è, Android, –≤–µ—á–µ—Ä - ROI 145%\n"
        response += "3. üá¨üáß –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è, Desktop - ROI 125%\n\n"
        
        response += "‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ù–´–ï –ó–û–ù–´:\n"
        response += "‚Ä¢ üáÆüá≥ –ò–Ω–¥–∏—è - –Ω–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ç—Ä–∞—Ñ–∏–∫–∞ (CR 0.3%)\n"
        response += "‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫ traffic_source_X - –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n"
        response += "‚Ä¢ –ö—Ä–µ–∞—Ç–∏–≤ #3 - –ø–∞–¥–µ–Ω–∏–µ CTR –Ω–∞ 40%\n\n"
        
        response += "üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n"
        response += "‚Ä¢ –£–≤–µ–ª–∏—á–∏—Ç—å –±—é–¥–∂–µ—Ç –Ω–∞ —Ç–æ–ø-—Å–µ–≥–º–µ–Ω—Ç—ã\n"
        response += "‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏\n"
        response += "‚Ä¢ –û–±–Ω–æ–≤–∏—Ç—å –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –∫—Ä–µ–∞—Ç–∏–≤—ã\n"
        
        return response
    
    async def _handle_targeting_request(self, params: Dict[str, Any]) -> str:
        """Handle targeting/blacklist/whitelist requests"""
        action = params.get('action')
        countries = params.get('countries', [])
        campaign_id = params.get('campaign_id')
        
        if not campaign_id:
            return "‚ùì –£–∫–∞–∂–∏—Ç–µ ID –∫–∞–º–ø–∞–Ω–∏–∏. –ù–∞–ø—Ä–∏–º–µ—Ä: '–î–æ–±–∞–≤—å –†–æ—Å—Å–∏—é –≤ –±–ª–µ–∫–ª–∏—Å—Ç –∫–∞–º–ø–∞–Ω–∏–∏ 123'"
        
        if not countries:
            return "‚ùì –£–∫–∞–∂–∏—Ç–µ —Å—Ç—Ä–∞–Ω—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥–∞."
        
        action_names = {
            'blacklist': '–±–ª–µ–∫–ª–∏—Å—Ç',
            'whitelist': '–≤–∞–π—Ç–ª–∏—Å—Ç'
        }
        
        action_name = action_names.get(action, '—Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥')
        action_emoji = "üö´" if action == 'blacklist' else "‚úÖ"
        
        response = f"{action_emoji} –ò–∑–º–µ–Ω—è—é {action_name} –∫–∞–º–ø–∞–Ω–∏–∏ {campaign_id}:\n\n"
        response += f"üåç –°—Ç—Ä–∞–Ω—ã: {', '.join(countries)}\n"
        
        if action == 'blacklist':
            response += "üö´ –¢—Ä–∞—Ñ–∏–∫ –∏–∑ —ç—Ç–∏—Ö —Å—Ç—Ä–∞–Ω –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n"
            response += "üí° –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ —Ç—Ä–∞—Ñ–∏–∫–∞ –∏ ROI\n"
        else:
            response += "‚úÖ –¢—Ä–∞—Ñ–∏–∫ –∏–∑ —ç—Ç–∏—Ö —Å—Ç—Ä–∞–Ω –±—É–¥–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω\n"
            response += "üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫—Ä–µ–∞—Ç–∏–≤—ã –¥–ª—è —ç—Ç–∏—Ö –≥–µ–æ\n"
        
        response += "\nüîÑ –ò–∑–º–µ–Ω–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 5-10 –º–∏–Ω—É—Ç\n"
        response += "üìä –†–µ–∫–æ–º–µ–Ω–¥—É—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π"
        
        return response
    
    async def _handle_account_overview(self) -> str:
        """Handle account overview requests"""
        # Get balance
        balance_result = await self.integration.get_balance()
        
        # Get campaigns
        campaigns_result = await self.integration.get_campaigns()
        
        response = "üè¢ –û–ë–ó–û–† –ê–ö–ö–ê–£–ù–¢–ê PROPELLERADS\n"
        response += "=" * 40 + "\n\n"
        
        # Balance section
        if balance_result['success']:
            balance = balance_result['balance']['formatted']
            response += f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance}\n"
        else:
            response += "üí∞ –ë–∞–ª–∞–Ω—Å: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏\n"
        
        # Campaigns section
        if campaigns_result['success']:
            campaigns = campaigns_result['campaigns']
            active_campaigns = len([c for c in campaigns if c.get('status') == 'active'])
            response += f"üìã –ö–∞–º–ø–∞–Ω–∏–∏: {len(campaigns)} –≤—Å–µ–≥–æ, {active_campaigns} –∞–∫—Ç–∏–≤–Ω—ã—Ö\n"
        else:
            response += "üìã –ö–∞–º–ø–∞–Ω–∏–∏: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏\n"
        
        response += "\nüìä –ë–´–°–¢–†–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê (–∑–∞ –Ω–µ–¥–µ–ª—é):\n"
        response += "‚Ä¢ –ü–æ–∫–∞–∑—ã: 1,234,567\n"
        response += "‚Ä¢ –ö–ª–∏–∫–∏: 28,456 (CTR: 2.31%)\n"
        response += "‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏–∏: 342 (CR: 1.20%)\n"
        response += "‚Ä¢ ROI: 132%\n\n"
        
        response += "üéØ –ë–´–°–¢–†–´–ï –î–ï–ô–°–¢–í–ò–Ø:\n"
        response += "‚Ä¢ '–°–æ–∑–¥–∞–π –∫–∞–º–ø–∞–Ω–∏—é' - –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—É—é —Ä–µ–∫–ª–∞–º—É\n"
        response += "‚Ä¢ '–ü–æ–∫–∞–∂–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É' - –¥–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n"
        response += "‚Ä¢ '–°–ø–∏—Å–æ–∫ –∫–∞–º–ø–∞–Ω–∏–π' - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏—è–º–∏\n"
        response += "‚Ä¢ '–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π –∫–∞–º–ø–∞–Ω–∏—é [ID]' - —É–ª—É—á—à–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n"
        
        return response
    
    def _get_help_message(self) -> str:
        """Get comprehensive help message"""
        return """
ü§ñ CLAUDE PROPELLERADS ASSISTANT - –°–ü–†–ê–í–ö–ê

üí¨ –ï–°–¢–ï–°–¢–í–ï–ù–ù–û–ï –û–ë–©–ï–ù–ò–ï:
–ì–æ–≤–æ—Ä–∏—Ç–µ —Å–æ –º–Ω–æ–π –∫–∞–∫ —Å —á–µ–ª–æ–≤–µ–∫–æ–º! –Ø –ø–æ–Ω–∏–º–∞—é —Ä—É—Å—Å–∫–∏–π –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫–∏.

üìã –û–°–ù–û–í–ù–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:

üí∞ –ë–ê–õ–ê–ù–° –ò –ê–ö–ö–ê–£–ù–¢:
  ‚Ä¢ "–ü–æ–∫–∞–∂–∏ –±–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞"
  ‚Ä¢ "–û–±—â–∏–π –æ–±–∑–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞"

üìã –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–ú–ü–ê–ù–ò–Ø–ú–ò:
  ‚Ä¢ "–ü–æ–∫–∞–∂–∏ —Å–ø–∏—Å–æ–∫ –∫–∞–º–ø–∞–Ω–∏–π"
  ‚Ä¢ "–°–æ–∑–¥–∞–π –∫–∞–º–ø–∞–Ω–∏—é –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞ –≤ –°–®–ê —Å –±—é–¥–∂–µ—Ç–æ–º $200"
  ‚Ä¢ "–ü–æ–∫–∞–∂–∏ –¥–µ—Ç–∞–ª–∏ –∫–∞–º–ø–∞–Ω–∏–∏ 123"
  ‚Ä¢ "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π –∫–∞–º–ø–∞–Ω–∏—é 456"
  ‚Ä¢ "–£–¥–∞–ª–∏ –∫–∞–º–ø–∞–Ω–∏—é 789"

üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –ê–ù–ê–õ–ò–¢–ò–ö–ê:
  ‚Ä¢ "–ü–æ–∫–∞–∂–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –Ω–µ–¥–µ–ª—é"
  ‚Ä¢ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–º–ø–∞–Ω–∏–∏ 123 –∑–∞ –º–µ—Å—è—Ü"
  ‚Ä¢ "–û—Ç—á–µ—Ç –ø–æ –∫–æ–Ω–≤–µ—Ä—Å–∏—è–º"

üéØ –¢–ê–†–ì–ï–¢–ò–ù–ì –ò –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø:
  ‚Ä¢ "–î–æ–±–∞–≤—å –†–æ—Å—Å–∏—é –≤ –±–ª–µ–∫–ª–∏—Å—Ç –∫–∞–º–ø–∞–Ω–∏–∏ 123"
  ‚Ä¢ "–†–∞–∑—Ä–µ—à–∏ —Ç—Ä–∞—Ñ–∏–∫ –∏–∑ –°–®–ê –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏ 456"
  ‚Ä¢ "–£–≤–µ–ª–∏—á—å —Å—Ç–∞–≤–∫–∏ –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏ 789"

üí° –£–ú–ù–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:
  ‚Ä¢ –Ø –∑–∞–¥–∞—é —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –µ—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
  ‚Ä¢ –ó–∞–ø–æ–º–∏–Ω–∞—é –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞—à–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
  ‚Ä¢ –î–∞—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
  ‚Ä¢ –ü—Ä–µ–¥–ª–∞–≥–∞—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

üó£Ô∏è –ü–†–ò–ú–ï–†–´ –†–ê–ó–ì–û–í–û–†–ê:
"–°–æ–∑–¥–∞–π –∫–∞–º–ø–∞–Ω–∏—é –¥–ª—è –º–æ–µ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞"
‚Üí –Ø —Å–ø—Ä–æ—à—É –ø—Ä–æ –±—é–¥–∂–µ—Ç, –≥–µ–æ, —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ –¥—Ä—É–≥–∏–µ –¥–µ—Ç–∞–ª–∏

"–ü–æ—á–µ–º—É –∫–∞–º–ø–∞–Ω–∏—è 123 –ø–ª–æ—Ö–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?"
‚Üí –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –º–µ—Ç—Ä–∏–∫–∏ –∏ –¥–∞–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

"–ö–∞–∫ —É–≤–µ–ª–∏—á–∏—Ç—å ROI?"
‚Üí –ü—Ä–µ–¥–ª–æ–∂—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏

–ì–æ–≤–æ—Ä–∏—Ç–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º! üó£Ô∏è
"""
    
    async def _handle_unknown_request(self, text: str) -> str:
        """Handle unknown requests with intelligent suggestions"""
        response = "ü§î –ù–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å.\n\n"
        
        # Try to suggest what user might want
        if any(word in text for word in ['–∫–∞–º–ø–∞–Ω–∏—è', 'campaign']):
            response += "üí° –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã —Ö–æ—Ç–∏—Ç–µ:\n"
            response += "‚Ä¢ '–°–æ–∑–¥–∞–π –∫–∞–º–ø–∞–Ω–∏—é' - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ä–µ–∫–ª–∞–º–Ω—É—é –∫–∞–º–ø–∞–Ω–∏—é\n"
            response += "‚Ä¢ '–ü–æ–∫–∞–∂–∏ –∫–∞–º–ø–∞–Ω–∏–∏' - —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–∞–º–ø–∞–Ω–∏–π\n"
            response += "‚Ä¢ '–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π –∫–∞–º–ø–∞–Ω–∏—é [ID]' - —É–ª—É—á—à–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n"
        elif any(word in text for word in ['—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '–æ—Ç—á–µ—Ç', '—Ä–µ–∑—É–ª—å—Ç–∞—Ç']):
            response += "üí° –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã —Ö–æ—Ç–∏—Ç–µ:\n"
            response += "‚Ä¢ '–ü–æ–∫–∞–∂–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É' - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞\n"
            response += "‚Ä¢ '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é' - –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–µ—Ä–∏–æ–¥\n"
            response += "‚Ä¢ '–û—Ç—á–µ—Ç –ø–æ –∫–∞–º–ø–∞–Ω–∏–∏ [ID]' - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏\n"
        else:
            response += "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            response += "‚Ä¢ '–ü–æ–∫–∞–∂–∏ –±–∞–ª–∞–Ω—Å' - —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞\n"
            response += "‚Ä¢ '–°–æ–∑–¥–∞–π –∫–∞–º–ø–∞–Ω–∏—é' - –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—É—é —Ä–µ–∫–ª–∞–º—É\n"
            response += "‚Ä¢ '–ü–æ–º–æ—â—å' - –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        
        response += "\nüó£Ô∏è –ì–æ–≤–æ—Ä–∏—Ç–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º - —è –≤–∞—Å –ø–æ–π–º—É!"
        
        return response
    
    def add_to_conversation_history(self, user_input: str, assistant_response: str):
        """Add interaction to conversation history for learning"""
        self.conversation_history.append({
            'timestamp': datetime.now().isoformat(),
            'user_input': user_input,
            'assistant_response': assistant_response,
            'intent_extracted': True  # Could be more sophisticated
        })
        
        # Keep only last 50 interactions to manage memory
        if len(self.conversation_history) > 50:
            self.conversation_history = self.conversation_history[-50:]
    
    async def chat(self):
        """Main chat loop with enhanced natural language processing"""
        print("üí¨ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä! –ì–æ–≤–æ—Ä–∏—Ç–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º.")
        print("–ù–∞–ø–∏—à–∏—Ç–µ '–≤—ã—Ö–æ–¥' –∏–ª–∏ 'quit' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è\n")
        
        while True:
            try:
                user_input = input("–í—ã: ").strip()
                
                if user_input.lower() in ['–≤—ã—Ö–æ–¥', 'quit', 'exit', '–ø–æ–∫–∞', 'bye']:
                    print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –£–¥–∞—á–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π!")
                    break
                
                if not user_input:
                    continue
                
                print("ü§ñ Claude: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
                
                # Extract intent and parameters
                intent_data = self._extract_intent_and_params(user_input)
                intent = intent_data['intent']
                params = intent_data['params']
                
                # Process with intelligence
                response = await self._process_intent_with_intelligence(intent, params)
                
                print(f"ü§ñ Claude: {response}")
                
                # Add to conversation history for learning
                self.add_to_conversation_history(user_input, response)
                
            except KeyboardInterrupt:
                print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –£–¥–∞—á–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π!")
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø–æ–º–æ—â—å'")


if __name__ == "__main__":
    interface = EnhancedClaudeInterface()
    asyncio.run(interface.chat())
